[
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Amazon Q Developer Workshop - Build enterprise Java application with Spring Boot Tổng quan Workshop này nhằm giúp chúng ta học cách xây dựng một ứng dụng Java doanh nghiệp theo kiến ​​trúc microservices bằng Spring Boot, với sự hỗ trợ từ Amazon Q Developer, một AI coding companion của Amazon. Chúng ta sẽ phát triển một ứng dụng microservices vừa phải để hiểu cách sử dụng Amazon Q Developer trong các dự án thực tế. Chúng ta không chỉ dừng lại ở việc tạo code mà còn tích hợp với nhiều dịch vụ AWS khác nhau và kiểm thử ứng dụng. Công nghệ sử dụng Ứng dụng mà chúng ta xây dựng là ứng dụng đặt chỗ chuyến bay, và ứng dụng sẽ sử dụng kiến trúc Microservices, chúng ta sẽ viết code và sử dụng Intelij IDEA IDE. Ngoài ra cũng cần các kiến thức về Java, Spring Boot, SQL và Junit. Chúng ta sẽ học cách sử dụng Amazon Q Developer để thực hiện các tác vụ sau: Tạo Lược Đồ Cơ Sở Dữ Liệu (Create Database Schema) Tải Dữ Liệu Vào Các Bảng (Load Data into Tables) Triển Khai Business Logic Cho API (Implement the Business Logic for API) Tích Hợp Các Dịch Vụ AWS (Integrate AWS Services) Tạo Kịch Bản Kiểm Thử Đơn Vị (Create Unit Test Scripts for the Classes) Các module của ứng dụng Ứng dụng của chúng ta sẽ bao gồm 2 Modules, bao gồm: Tìm chuyến bay (Find flights) API này sẽ nhận danh sách các chuyến bay dựa trên thông số truy vấn ngày khởi hành, thành phố khởi hành và thành phố đến. Trong module này, chúng ta sẽ sử dụng Amazon Q Developer để triển khai tích hợp với Amazon Cognito, AWS Secrets Manager và Amazon RDS bằng Spring Data JPA. Đặt chuyến bay (Book flights) API này sẽ đặt trước chuyến bay và gửi email xác nhận cho hành khách kèm theo chi tiết đặt chỗ. Trong module này, chúng ta sẽ sử dụng Amazon Q Developer để triển khai xác thực dữ liệu đầu vào, ánh xạ dữ liệu, xử lý ngoại lệ, thông báo bằng Amazon SNS. Module 2 tận dụng một số code được xây dựng trong module 1. Kiến trúc Nội dung chính Thiết lập môi trường Module 1 - API tìm chuyến bay (Find Flights API) Module 2 - API đặt chỗ chuyến bay (Flight Reservation API) Chạy thử API với Postman Clean up "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/1-connecting-ec2/",
	"title": "Kết nối EC2",
	"tags": [],
	"description": "",
	"content": " Tạo stack và nạp vào file .yaml để có được các tài nguyên đã cấu hình sẵn\nTruy xuất thông tin xác thực cho EC2 instance đã được cung cấp\nVào AWS Console, nhập vào ô tìm kiếm Secrets, sau đó chọn vào Secrets Manager Chúng ta sẽ thấy EC2InstanceSecret, nó xuất hiện do chúng ta đã nạp từ file .yaml, giờ chúng ta bấm vào nó. Sau khi bấm vào, kéo xuống phần Secret value và sau đó bấm vào Retreive secret value. Sau đó chúng ta có thể thấy được các giá trị bí mật như là User name và Password, copy nó để chuẩn bị cho bước tiếp theo. Thiết lập Inbound rule cho Security group của EC2 cho RDP từ thiết bị của chúng ta.\nMở AWS console, tìm kiếm EC2 trên thanh tìm kiếm và chọn vào Trong EC2 Dashboard, chọn vào Instances (Running). Click vào ID của instance đang chạy này. Lăn xuống, và chọn vào tab Security, sau đó Click vào link của Security group\nSau khi vào được Security group, kéo xuống chọn vào Inbound rules, sau đó chọn Edit inboud rules.\nChúng ta sẽ Add rule cho Inbound rule, cụ thể chúng ta sẽ thêm 1 rule cho giao thức RDP và nguồn sẽ đến từ địa chỉ IP của thiết bị của chúng ta, sau đó bấm Save rules.\nĐăng nhập vào EC2 instance của chúng ta.\nVào lại EC2 instance của chúng ta, tick chọn vào nó và bấm Connect Chọn vào tab RDP client, và sau đó bấm Download remote desktop file. Đến nơi vừa tải file, chọn vào nó, và tiến hành Connect bằng user name và password ban nãy vừa sao chép Có thể chúng ta sẽ xuất hiện cảnh báo như hình dưới đây, nếu vậy thì hãy bấm Yes. Sau khi đăng nhập thành công, chúng ta sẽ sử dụng máy này để tiếp tục, đây là giao diện thực hành của máy sau khi chúng ta đăng nhập thành công. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/1-table-database-module2/",
	"title": "Tạo bảng và load dữ liệu",
	"tags": [],
	"description": "",
	"content": " Tạo các bảng cần thiết cho API. API này cần hai bảng: Bảng khách hàng (Passenger) nắm giữ thông tin cá nhân của hành khách. Bảng đặt chỗ (Reservation) nắm giữ chi tiết đặt chỗ chuyến bay. Chúng ta không cần thiết lập dữ liệu test cho các bảng này. Điều hướng đến thư mục src/main/java/com.airlines.catalog và mở tệp DBSetupModule2.sql. Sử dụng prompt bên dưới để xây dựng tập lệnh SQL cho bảng passenger. Prompt\rCreate passenger table with columns passenger_Id Auto increment, adult, gender, first_Name, last_Name\rAll columns are not nullable\rSau khi có lệnh SQL thì chúng ta bỏ nó qua MySQL workbench để tiến hành chạy và tạo bảng Tương tự như trên, dùng prompt này để tạo bảng reservation Prompt\rCreate reservation table with columns booking_Reference as BIGINT Auto increment, passenger_Id, flight_Id, reservation_Date, reservation_Time, reservation_Status, travel_Class, ticket_Price as decimal, currency_Code, payment_Status, payment_Mode, contact_Number, contact_Email passenger_Id references passenger table flight_Id references flight.id\rBây giờ chúng ta đã có 2 bảng cần cho module 2. Code SQL tạo bảng hoàn chỉnh // Create passenger table with columns passenger_Id as int Auto increment, adult, gender, first_Name, last_Name // All columns are not nullable CREATE TABLE passenger ( passenger_id INT NOT NULL AUTO_INCREMENT, adult BOOLEAN NOT NULL, gender VARCHAR(10) NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, PRIMARY KEY (passenger_id) ); // Create reservation table with columns booking_Reference as BIGINT Auto increment, passenger_Id, flight_Id, // reservation_Date, reservation_Time, reservation_Status, travel_Class, ticket_Price as decimal, // currency_Code, payment_Status, // payment_Mode, contact_Number, contact_Email // passenger_Id references passenger table // flight_Id references flight.id CREATE TABLE reservation ( booking_reference BIGINT NOT NULL AUTO_INCREMENT, passenger_id INT NOT NULL, flight_id INT NOT NULL, reservation_date DATE NOT NULL, reservation_time TIME NOT NULL, reservation_status VARCHAR(20) NOT NULL, travel_class VARCHAR(20) NOT NULL, ticket_price DECIMAL(10,2) NOT NULL, currency_code VARCHAR(3) NOT NULL, payment_status VARCHAR(20) NOT NULL, payment_mode VARCHAR(20) NOT NULL, contact_number VARCHAR(20) NOT NULL, contact_email VARCHAR(50) NOT NULL, PRIMARY KEY (booking_reference), FOREIGN KEY (passenger_id) REFERENCES passenger(passenger_id), FOREIGN KEY (flight_id) REFERENCES flight(id) ); "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/1-table-database-module1/",
	"title": "Thiết lập bảng cho database của Module 1",
	"tags": [],
	"description": "",
	"content": " Chúng ta sẽ tiến hành tạo 2 bảng đó là Airport và bảng Flight trong FlightReservationDB Database. Chúng ta cũng sẽ tạo các SQL script để tải các data thử nghiệm lên 2 bảng. Trong thư mục dự án Airline-Booking-PromptProject, mở rộng directory “src” từ thanh bên trái, điều hướng đến folder src/main/java/com.airlines.catalog và mở DBSetupModule1.sql Tiếp đến chúng ta cần mở MySQL workbench rồi chuyển qua database có tên là FlightReservationDB , database này đã được tạo sẵn trong workshop. Tiếp theo chúng ta dùng câu lệnh sau trong IDE để tạo bảng airport. Sau đó dùng Prompt này cho Amazon Q chat để tạo bảng flight. Từ các bước trên, chúng ta sẽ có hoàn chỉnh như hình dưới đây, bỏ chúng vào MySQL Workbench để tiến hành generate tạo bảng airport và flight Tiếp theo chúng ta sẽ chèn test data vào bảng airport, chúng ta sẽ viết script trong IDE, rồi sau đó copy qua workbench để tiến hành chạy Tiếp theo chúng ta sẽ nhờ Amazon Q chat để chèn test data vào bảng flight với prompt như sau. Prompt\rCreate 5 records in flight table satisfying the following data conditions,\n2 flights between MIA and LAX on a departure date 2023-08-01,\n2 flight between LHR and CDG on a departure date 2023-08-01,\n1 flight between LHR and CDG, departure date 2023-08-02,\n1 flight between MIA and LAX with available seats as 0 on a departure date 2023-08-02 Chúng ta sẽ copy tất cả các script vào MySQL workbench rồi chạy để chèn được các data vào bảng.\nCode SQL hoàn chỉnh cho tạo bảng\nuse FlightReservationDB; CREATE TABLE airport ( airport_code VARCHAR(10) PRIMARY KEY, airport_name VARCHAR(100), airport_city VARCHAR(100), airport_locale VARCHAR(100) ); CREATE TABLE flight ( id INT PRIMARY KEY, departure_date DATE, departure_time TIME, departure_airport_code VARCHAR(10), arrival_date DATE, arrival_time TIME, arrival_airport_code VARCHAR(10), flight_number VARCHAR(20), flight_duration INT, ticket_price DECIMAL(10, 2), ticket_currency VARCHAR(3), seat_capacity INT, seat_available INT, FOREIGN KEY (departure_airport_code) REFERENCES airport(airport_code), FOREIGN KEY (arrival_airport_code) REFERENCES airport(airport_code) ); Code SQL hoàn chỉnh cho tải dữ liệu tạm INSERT INTO airport (airport_code, airport_name, airport_city, airport_locale) VALUES (\u0026#39;LHR\u0026#39;, \u0026#39;London Heathrow Airport\u0026#39;, \u0026#39;London\u0026#39;, \u0026#39;United Kingdom\u0026#39;), (\u0026#39;MIA\u0026#39;, \u0026#39;Miami International Airport\u0026#39;, \u0026#39;Miami\u0026#39;, \u0026#39;United States\u0026#39;), (\u0026#39;CDG\u0026#39;, \u0026#39;Charles de Gaulle Airport\u0026#39;, \u0026#39;Paris\u0026#39;, \u0026#39;France\u0026#39;), (\u0026#39;LAX\u0026#39;, \u0026#39;Los Angeles International Airport\u0026#39;, \u0026#39;Los Angeles\u0026#39;, \u0026#39;United States\u0026#39;); INSERT INTO flight (id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available) VALUES (1, \u0026#39;2023-08-01\u0026#39;, \u0026#39;09:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;11:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA101\u0026#39;, 330, 199.99, \u0026#39;USD\u0026#39;, 200, 180), (2, \u0026#39;2023-08-01\u0026#39;, \u0026#39;15:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA102\u0026#39;, 330, 249.99, \u0026#39;USD\u0026#39;, 180, 150), (3, \u0026#39;2023-08-01\u0026#39;, \u0026#39;08:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;10:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA201\u0026#39;, 150, 129.99, \u0026#39;EUR\u0026#39;, 220, 200), (4, \u0026#39;2023-08-01\u0026#39;, \u0026#39;16:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;18:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA202\u0026#39;, 150, 149.99, \u0026#39;EUR\u0026#39;, 180, 160), (5, \u0026#39;2023-08-02\u0026#39;, \u0026#39;10:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;12:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA203\u0026#39;, 150, 169.99, \u0026#39;EUR\u0026#39;, 220, 220), (6, \u0026#39;2023-08-02\u0026#39;, \u0026#39;12:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;14:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA103\u0026#39;, 330, 299.99, \u0026#39;USD\u0026#39;, 180, 0); "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/",
	"title": "Thiết lập môi trường",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ thiết lập những thứ sau đây để có thể thực hành.\nNội dung:\nKết nối EC2 Cấu hình Cognito Cấu hình SNS topic để gửi email Cấu hình MySQL Workbench để kết nối tới RDS Mở Project trong Intelij IDE Thiết lập Amazon Q Developer trong JetBrains Intelij "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/2-config-cognito/",
	"title": "Cấu hình Cognito",
	"tags": [],
	"description": "",
	"content": " Tìm hiểu về Amazon Cognito\nMột Amazon Cognito user pool cung cấp một thư mục người dùng mà bạn sẽ sử dụng để xác thực và cấp quyền truy cập vào API ứng dụng đặt chỗ chuyến bay. Bạn sẽ sử dụng UI người dùng được host trên Amazon Cognito để đăng ký và tạo người dùng mới. Nó sẽ trả về session token (JW Token), cái này thì bạn sẽ sử dụng trong HTTP request Authorization headers khi bạn thực hiện lệnh gọi API. Sau này trong workshop ở module 1, chúng ta sẽ viết mã để xác minh token được phép trong request API bằng cognito. Thực hiện theo Hướng dẫn để đăng ký và tạo người dùng mới. Hành động đăng ký sẽ tự động đăng nhập cho bạn và cung cấp cho bạn token. Các token này được định cấu hình để có hiệu lực trong 1 giờ. Nếu bạn gặp lỗi hết hạn token trong quá trình kiểm tra API, hãy làm theo hướng dẫn bên dưới để đăng nhập và nhận token mới. Đăng ký tạo người dùng mới\nGõ vào Cognito trong ô tìm kiếm và sau đó chọn vào Trong mục User pools, chúng ta sẽ thấy có 1 User pool được thiết lập sẵn, phần đuôi của nó sẽ là -UserPool, hãy chọn vào nó. Sau khi bấm vào, chọn vào tab App integration. Tiếp theo lăn xuống mục App clients and analytics và click vào App client mà bạn đã được thiết lập sẵn. Trong màn hình của App client, lăn xuống mục Hosted UI, sau đó bấm vào View Hosted UI. Sau khi bấm vào, chúng ta sẽ được đưa đến giao diện đăng nhập, bấm vào Sign up để tiến hành đăng ký 1 tài khoản, và chúng ta tiến hành đăng ký. Sau đó chúng ta nhận được mã để xác minh tài khoản trong mail mà chúng ta đăng ký, xác minh xong thì chúng ta sẽ nhận được. Chúng ta không cần quan tâm, thứ chúng ta quan tâm là url ở trên thanh tìm kiếm, lúc này trên thanh của chúng ta sẽ có token, chúng ta copy cái URL ra, tìm thấy giá trị của access token và copy lấy nó. Lưu ý là token này chỉ tồn tại trong vòng 1 giờ, sau 1 giờ thì chúng ta tiếp tục đăng nhập lại và lấy token. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/",
	"title": "Module 1 - API tìm chuyến bay (Find Flights API)",
	"tags": [],
	"description": "",
	"content": "Sơ lược về API tìm chuyến bay Trong module này, bạn sẽ xây dựng API để tìm chuyến bay dựa trên ngày khởi hành, mã sân bay khởi hành và mã sân bay đến. API này trả về danh sách các chuyến bay có thông tin chi tiết về chuyến bay, chỗ ngồi và thông tin về giá. Lệnh gọi API được bảo mật bằng JWT token. Người dùng đăng nhập vào UI người dùng được hosted trên Cognito để nhận JWT token và chuyển token trong Authorization HTTP header. API xác minh JWT token và sau đó cho phép thực hiện hành động được yêu cầu. API tương tác với các bảng chuyến bay (flights) và sân bay (airport) trong cơ sở dữ liệu RDS MySQL để nhận kết quả. Thông tin đăng nhập RDS được lưu trữ an toàn trong AWS Secret Manager. API trả về các trường sau: Flight Id, Departure, Departure, Departure AirportCode, Departure Airport Name, departure Airport City, Departure Airport Locale Arrival Airport Code, Arrival Airport Name, Arrival Airport City, Arrival Airport Locale, Arrival Date, Arrival Time, Ticket Price Ticket Currency, Flight Number, Flight Duration; Seat Available Cơ sở dữ liệu cho module này có 2 bảng: Bảng Airport- lưu trữ thông tin chi tiết về Sân bay với Airport Code làm khóa chính và thông tin chi tiết về sân bay liên quan. Bảng Flight - lưu trữ danh sách các chuyến bay cùng với lịch trình, sức chứa và số ghế còn trống. Sơ đồ lớp Liên kết nhanh đến các phần hướng dẫn chi tiết Thiết lập bảng cho database của Module 1 Xây dựng các lớp model Tạo Data Transfer Object (DTO) Dựng JPA Repository Interface Cấu hình Datasource Xây dựng các lớp Service Unit Testing cho các lớp Reposity Unit Test lớp service Lấy Cognito public keys Xây dựng Exception Handler để xử lý các Authentication Exceptions Tạo lớp FlightReservation Controller Unit test API tìm chuyến bay "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/2-model-classes-module1/",
	"title": "Xây dựng các lớp model",
	"tags": [],
	"description": "",
	"content": " Chúng ta sẽ xây dựng các lớp model để làm việc với bảng airport và bảng flight. Trong project chúng ta sẽ thấy có 4 file nằm trong directory src/main/java/com.airlines.catalog/model. Đối với module này, chúng ta sẽ làm việc với Airport.java và Flight.java. Chúng ta sẽ xây dựng các lớp modle trong hai tệp này. Mở Airport.java. Bạn muốn biết các thư viện cần nạp để tạo tự động các getters, setters và constructor. Bạn cũng cần nhập thư viện làm JPA Entiry. Sử dụng prompt sau để nhận đề xuất từ Amazon Q Chat Panel. Prompt1\r*Give me the import statements that i need to include in my model class to generate Getter, Setter and constructor* Prompt2\r*Give me the import statements that i need to include in my model class to make it a JPA Entity* Chúng ta sẽ copy và dán các thư viện này vào file Airport.java. Tiếp theo, chúng ta dùng prompt dưới đây để tiến hành hoàn thành lớp Airport.java Prompt\r*Create an Entity class Airport mapped to table airport with following 4 attributes; airportCode as id, airportName, airportCity and airportLocale.*\n*Each attribute should be mapped to table columns and column names will be same as attribute names with _ separator between parts of the name. Use Lombok for getters and setters* Mở DBSetupModule1.sql và chọn lệnh SQL \u0026quot; CREATE TABLE flight\u0026quot;, nhấp chuột phải và chọn Send to Amazon Q rồi sau đó Send to Prompt từ menu phụ. Lệnh SQL được sao chép vào Amazon Q Chat Panel và bạn có thể sử dụng prompt bên dưới ở đầu câu lệnh SQL để lấy code cho lớp Flight. Prompt\r*Create flight JPA Entity class for the below table defintiion. Do not create any relationship between airport and flight entity. Use String for date and time columns* Sau khi tạo xong thì copy code bỏ vào file Flight.java Tạo một phương thức toString cho lớp này bằng cách sử dụng prompt bên dưới, sau đó copy code bỏ vào file Flight.java Prompt\r*Create a tostring method to convert attributes to string* Tượng tự, tạo một phương thức toJson cho lớp này bằng cách sử dụng prompt bên dưới, sau đó, lấy code bỏ vào file Flight.java Prompt\rCreate a **toJson** method to convert the attributes to Json String Code hoàn chỉnh cho lớp Airport package com.airlines.catalog.model; package com.airlines.catalog.model; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Column; import lombok.Data; @Entity @Table(name = \u0026#34;airport\u0026#34;) @Data public class Airport { @Id @Column(name = \u0026#34;airport_code\u0026#34;) private String airportCode; @Column(name = \u0026#34;airport_name\u0026#34;) private String airportName; @Column(name = \u0026#34;airport_city\u0026#34;) private String airportCity; @Column(name = \u0026#34;airport_locale\u0026#34;) private String airportLocale; // Default constructor (required by JPA) public Airport() { } } Code hoàn chỉnh cho lớp Flight package com.airlines.catalog.model; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Column; import lombok.Getter; import lombok.Setter; @Entity @Table(name = \u0026#34;flight\u0026#34;) @Getter @Setter public class Flight { @Id @Column(name = \u0026#34;id\u0026#34;) private int id; @Column(name = \u0026#34;departure_date\u0026#34;) private String departureDate; @Column(name = \u0026#34;departure_time\u0026#34;) private String departureTime; @Column(name = \u0026#34;departure_airport_code\u0026#34;) private String departureAirportCode; @Column(name = \u0026#34;arrival_date\u0026#34;) private String arrivalDate; @Column(name = \u0026#34;arrival_time\u0026#34;) private String arrivalTime; @Column(name = \u0026#34;arrival_airport_code\u0026#34;) private String arrivalAirportCode; @Column(name = \u0026#34;flight_number\u0026#34;) private String flightNumber; @Column(name = \u0026#34;flight_duration\u0026#34;) private int flightDuration; @Column(name = \u0026#34;ticket_price\u0026#34;) private double ticketPrice; @Column(name = \u0026#34;ticket_currency\u0026#34;) private String ticketCurrency; @Column(name = \u0026#34;seat_capacity\u0026#34;) private int seatCapacity; @Column(name = \u0026#34;seat_available\u0026#34;) private int seatAvailable; // Default constructor public Flight() { } //Create a tostring method to convert attributes to string @Override public String toString() { return \u0026#34;Flight{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightDuration=\u0026#34; + flightDuration + \u0026#34;, ticketPrice=\u0026#34; + ticketPrice + \u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, seatCapacity=\u0026#34; + seatCapacity + \u0026#34;, seatAvailable=\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } //Create a toJson method to convert the attributes to Json String public String toJson() { return \u0026#34;{\u0026#34; + \u0026#34;\\\u0026#34;id\\\u0026#34;:\\\u0026#34;\u0026#34; + id + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\u0026#34; + flightDuration + \u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice + \u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;seatCapacity\\\u0026#34;:\u0026#34; + seatCapacity + \u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/2-model-classes-module2/",
	"title": "Xây dựng tầng model",
	"tags": [],
	"description": "",
	"content": " Tiếp theo, bạn sẽ tạo các lớp model để cho phép ứng dụng tương tác với các bảng passenger và reservation trong cơ sở dữ liệu. Trong cấu trúc dự án của bạn, bạn có thể thấy 2 tệp java được tạo cho passenger.java và reservation.java. Bạn sẽ phát triển các lớp này để xây dựng chức năng. Điều hướng đến thư mục src/main/java/com.airlines.catalog/model, mở tệp Passenger.java và thêm các import sau: Sử dụng prompt bên dưới để tạo lớp Passengerentity Prompt\rCreate Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName,\rlastName mapped to passenger table, column names sepetated by _\rBây giờ lớp Passenger entity đã hoàn thành, chúng ta tiếp tục với lớp reservation entity, điều hướng đến thư mục src/main/java/com.airlines.catalog/model, mở Deposit.java và thêm các import sau: Sử dụng prompt bên dưới để tạo lớp Reservationentity Prompt\r/* Build a Reservation Entity class mapped to database table reservation Attributes for the class:\rbookingReference as long identity autogenerated,\rpassengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass,\rticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber,\rcontactEmail mapped to column names seperated by _\rCode hoàn chỉnh cho lớp Passenger. package com.airlines.catalog.model; import lombok.Getter; import lombok.Setter; import javax.persistence.Entity; import javax.persistence.Table; import javax.persistence.Id; import javax.persistence.Column; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; /* Build a Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName, lastName mapped to passenger table, column names sepetated by _*/ @Getter @Setter @Entity @Table(name = \u0026#34;passenger\u0026#34;) public class Passenger { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026#34;passenger_id\u0026#34;) private int passengerId; @Column(name = \u0026#34;adult\u0026#34;) private boolean adult; @Column(name = \u0026#34;gender\u0026#34;) private String gender; @Column(name = \u0026#34;first_name\u0026#34;) private String firstName; @Column(name = \u0026#34;last_name\u0026#34;) private String lastName; } Code hoàn chỉnh cho lớp Reservation package com.airlines.catalog.model; import lombok.Getter; import lombok.Setter; import javax.persistence.Entity; import javax.persistence.Table; import javax.persistence.Id; import javax.persistence.Column; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; /* Build a Reservation Entity class mapped to database table reservation Attributes for the class: bookingReference as long identity autogenerated, passengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass, ticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber, contactEmail mapped to column names seperated by _ */ @Getter @Setter @Entity @Table(name = \u0026#34;reservation\u0026#34;) public class Reservation { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026#34;booking_reference\u0026#34;) private long bookingReference; @Column(name = \u0026#34;passenger_id\u0026#34;) private int passengerId; @Column(name = \u0026#34;flight_id\u0026#34;) private int flightId; @Column(name = \u0026#34;reservation_date\u0026#34;) private String reservationDate; @Column(name = \u0026#34;reservation_time\u0026#34;) private String reservationTime; @Column(name = \u0026#34;reservation_status\u0026#34;) private String reservationStatus; @Column(name = \u0026#34;travel_class\u0026#34;) private String travelClass; @Column(name = \u0026#34;ticket_price\u0026#34;) private double ticketPrice; @Column(name = \u0026#34;currency_code\u0026#34;) private String currencyCode; @Column(name = \u0026#34;payment_status\u0026#34;) private String paymentStatus; @Column(name = \u0026#34;payment_mode\u0026#34;) private String paymentMode; @Column(name = \u0026#34;contact_number\u0026#34;) private String contactNumber; @Column(name = \u0026#34;contact_email\u0026#34;) private String contactEmail; } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/3-configsns-to-send-email/",
	"title": "Cấu hình SNS topic để gửi email",
	"tags": [],
	"description": "",
	"content": " Giới thiệu\nỨng dụng sẽ gửi tin nhắn đến SNS Topic - \u0026ldquo;reservation-success\u0026rdquo; nghĩa là đặt chỗ thành công, sau khi vé máy bay được đặt. Bây giờ chúng ta sẽ cấu hình topic để gửi email bất cứ khi nào có tin nhắn được gửi đến topic này. Cấu hình SNS topic\nVào ô tìm kiếm, nhập vào SNS, sau đó bấm chọn Simple Notification Noitices. Chọn vào phần Topics ở thanh Menu bên trái, sau đó chúng ta sẽ thấy có topic là reservation-success, hãy tích chọn vào nó. Sau khi chọn vào topic, kéo xuống phần Subcriptions, sau đó bấm Create subscription. Sau đó chúng ta chọn Protocol là Email, sau đó chúng ta nhập email mà chúng ta muốn nhận được thông báo. Cuối cùng bấm Create subscription. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/",
	"title": "Module 2 - API đặt chỗ chuyến bay (Flight Reservation API)",
	"tags": [],
	"description": "",
	"content": "Sơ lược về API đặt chỗ chuyến bay Tổng quan về API Trong Module này, chúng ta sẽ xây dựng API đặt chỗ Chuyến bay cung cấp chức năng đặt chuyến bay. API sẽ lấy thông tin chi tiết về hành khách, thông tin đặt chỗ và thông tin chi tiết về chuyến bay để đặt chỗ làm đầu vào. Id chuyến bay được trả về từ lệnh gọi API findFlight sẽ được cung cấp làm đầu vào cho API này. Lệnh gọi API được bảo mật bằng JWT token. Người dùng sẽ đăng nhập vào UI người dùng được host trên Cognito để nhận JWT token và pass token trong Authorization HTTP header. API xác minh token trước khi lưu dữ liệu vào bảng hành khách (passenger) và đặt chỗ (reservation) trong cơ sở dữ liệu. API sẽ thực hiện các chức năng sau: Xác thực các chi tiết đặt chỗ được cung cấp trong yêu cầu, chẳng hạn như Not Null, xác thực định dạng Email và xác thực định dạng Số điện thoại. Lưu trữ dữ liệu sau khi xác nhận vào bảng hành khách (passenger) và đặt chỗ (reservation). Gửi thông báo xác nhận đặt chỗ với các chi tiết đặt chỗ và số tham chiếu đặt chỗ đến SNS topic. Toàn bộ bước này cần phải xảy ra trong một atomic transaction. Người dùng nhận được số tham chiếu đặt chỗ qua email và cả trong phản hồi API. Class design cho module 2 Liên kết nhanh đến các phần hướng dẫn chi tiết Tạo bảng và load dữ liệu Xây dựng tầng model Xây dựng JPA Repository Unit test cho các lớp Repository Xử lý các Business Exceptions Xây dựng các lớp service Unit Test Lớp service FlightBooking Tạo chi tiết đặt chỗ DTO (DTO Reservation Details) Tạo Controller API đặt chuyến bay Unit test cho API đặt chỗ chuyến bay "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/3-dto-module1/",
	"title": "Tạo Data Transfer Object (DTO)",
	"tags": [],
	"description": "",
	"content": " Thực thể Flight mà bạn đã tạo trong chương \u0026quot; Xây dựng các lớp model \u0026quot; chứa mã sân bay nhưng phản hồi API cần thêm thông tin về sân bay như tên, thành phố và ngôn ngữ. Bạn sẽ tạo một lớp FlightDetails sẽ kết hợp thông tin từ các bảng flight và airport. Mở FlightDetails.java trong folder src/main/java/com.airlines.catalog/dto Từ Amazon Q Chat Panel trong IDE của bạn, hãy sử dụng prompt bên dưới để tạo lớp FlightDetails hoàn chỉnh. Nhấp vào nút Copy bên dưới code panel và dán code vào tệp FlightDetails.java. Prompt\r*Create class FlightDetails with following attributes:*\n*flightId as int, departureDate, departureTime, departureAirportCode as string, departureAirportName as string,*\n*departureAirportCity, departureAirportLocale,*\n*arrivalAirportCode, arrivalAirportName, arrivalAirportCity, arrivalAirportLocale,*\n*arrivalDate, arrivalTime, ticketPrice as double,*\n*ticketCurrency, flightNumber, flightDuration, seatAvailable as int*\nTạo một phương thức toString cho lớp này bằng cách sử dụng prompt bên dưới, sau đó copy code bỏ vào file FlightDetails.java Prompt\r*Create a tostring method to convert attributes to string* Tương tự tạo 1 phương thức là toJon với prompt dưới đây. Prompt\r*Create a toJson method to convert the attributes to Json string* Code hoàn chỉnh cho lớp FlightDetails package com.airlines.catalog.dto; import lombok.Getter; import lombok.Setter; @Getter @Setter public class FlightDetails { private int flightId; private String departureDate; private String departureTime; private String departureAirportCode; private String departureAirportName; private String departureAirportCity; private String departureAirportLocale; private String arrivalAirportCode; private String arrivalAirportName; private String arrivalAirportCity; private String arrivalAirportLocale; private String arrivalDate; private String arrivalTime; private double ticketPrice; private String ticketCurrency; private String flightNumber; private int flightDuration; private int seatAvailable; //Create a toString method to convert the attributes to string @Override public String toString() { return \u0026#34;FlightDetails{\u0026#34; + \u0026#34;flightId=\u0026#34; + flightId + \u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportName=\u0026#39;\u0026#34; + departureAirportName + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCity=\u0026#39;\u0026#34; + departureAirportCity + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportLocale=\u0026#39;\u0026#34; + departureAirportLocale + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportName=\u0026#39;\u0026#34; + arrivalAirportName + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCity=\u0026#39;\u0026#34; + arrivalAirportCity + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportLocale=\u0026#39;\u0026#34; + arrivalAirportLocale + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, ticketPrice=\u0026#34; + ticketPrice + \u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightDuration=\u0026#34; + flightDuration + \u0026#34;, seatAvailable=\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } //Create a toJson method to convert the attributes to Json string public String toJson() { return \u0026#34;{\u0026#34; + \u0026#34;\\\u0026#34;flightId\\\u0026#34;:\\\u0026#34;\u0026#34; + flightId + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportName\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportName + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCity\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCity + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportLocale\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportLocale + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportName\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportName + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCity\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCity + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportLocale\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportLocale + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketPrice + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\\\u0026#34;\u0026#34; + flightDuration + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\\\u0026#34;\u0026#34; + seatAvailable + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#39;}\u0026#39;; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/3-jpa-repository-module2/",
	"title": "Xây dựng JPA Repository",
	"tags": [],
	"description": "",
	"content": " Bạn sẽ tạo JPA Repository Interfaces để truy cập dữ liệu từ Bảng MYSQL. Chỉ định các mẫu truy vấn để lưu dữ liệu vào bảng passenger và reservation Mở PassengerRepository.java trong thư mục src/main/java/com.airlines.catalog/repository. Sau đó thêm các import này vào. Sử dụng prompt sau để tạo lớp PassengerRepository. Prompt\rcreate jpa repository interface PassengerRepository.\rAdd a method to save passenger\rMở DepositRepository.java trong thư mục src/main/java/com.airlines.catalog/repository, và thêm các import sau. Sử dụng prompt sau để tạo lớp DepositRepository. Prompt\rCreate interface ReservationRepository that extends JpaRepository.\rAdd a method to save reservation.\rMã hoàn chỉnh cho lớp PassengerRepository package com.airlines.catalog.repository; import com.airlines.catalog.model.Passenger; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; /* create jpa repository interface PassengerRepository. Add a method to save Passenger. */ @Repository public interface PassengerRepository extends JpaRepository\u0026lt;Passenger, Integer\u0026gt; { Passenger save(Passenger passenger); } Code hoàn chỉnh cho lớp ReservationRepository package com.airlines.catalog.repository; import com.airlines.catalog.model.Reservation; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; // Create interface ReservationRepository that extends JpaRepository. // Add a method to save reservation. @Repository public interface ReservationRepository extends JpaRepository\u0026lt;Reservation, Long\u0026gt; { Reservation save(Reservation reservation); } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/4-config-mysql-to-connect-rds/",
	"title": "Cấu hình MySQL Workbench để kết nối tới RDS",
	"tags": [],
	"description": "",
	"content": " Chúng ta cần phải lấy được chi tiết thông tin của RDS instace để có thể thiết lập với MySQL Workbench.\nTruy xuất thông tin của RDS MySQL instance được cấp\nTrong AWS console, vào thanh tìm kiếm có Secrets, sau đó chúng ta bấm chọn Secrets Manager. Sau đó chúng ta bấm chọn vào Secret có tên là RDSSecretForApp. Lướt xuống phần Secret value, sau đó bấm nút Retrieve secret value. Chúng ta có chi tiết về RDS ở đây, copy chúng ra để thực hiện cho lần sau Thiết lập kết nối MySQL Workbench\nTìm MySQL trong cái máy chúng ta kết nối tới instance. Sau khi vào, chọn vào Database, sau đó chọn Manage Connections. Sau đó bấm vào nút New ở dưới cùng, sau đó nhập tên cho Connection, và sau đó lấy các thông tin từ RDS instance để viết vào, sau đó bấm vào Store in Vault… Sau khi bấm, chúng ta lấy mật khẩu từ chi tiết của RDS để tiến hành nhập vào, sau đó bấm OK Sau khi xong, chúng ta bấm Test Connection để kiểm tra việc kết nối có được hay không. Nếu nó hiện ra bảng như thế này thì chúng ta đã thiết lập thành công. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/4-testing-api-with-postman/",
	"title": "Chạy thử API với Postman",
	"tags": [],
	"description": "",
	"content": " Qua các phần trên, chúng ta đã tạo thành công các API (tìm chuyến bay và đặt chỗ chuyến bay ) và đã thử nghiệm sự hoạt động của nó thông qua các test case, và dường như chúng đều chạy rất ổn. Nhưng để thực tế , chúng ta cần phải có các request thực tới API của chúng ta để có thểm kiểm chứng độ hoạt động của API. Trong phần này, chúng ta sẽ tiến hành thử nghiệm lần lượt với cả 2 API với Postman để xem API của chúng ta có hoạt động hay không. Nếu thành công chúng ta có thể nhận được các phản hồi tương ứng theo từng module. 1. Với API đặt chuyến bay (Module 2) Bây giờ chúng ta sẽ sử dụng API của chúng ta để đặt thử 1 chuyến bay, khi mà chúng ta đặt thì chúng ta sẽ có e-mail báo đặt thành công, và dữ liệu cũng sẽ được thêm vào database. Đầu tiên chúng ta cần chạy được dự án của chúng ta lên, chúng ta mở tệp FlightBookingApplication lên và chạy nó. Tiếp theo chúng ta vào Postman, chúng ta sẽ kết nối tới http://localhost:8090/reserve. Chúng ta dùng phương thức Post. Tiếp theo, chúng ta vào phần Authorization. Type chọn là No auth. Sau đó chúng ta qua phần Body, chọn raw, sau đó dán vào dữ liệu Json như sau. { \u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Davis\u0026#34;, \u0026#34;gender\u0026#34;:\u0026#34;Male\u0026#34;, \u0026#34;age\u0026#34;: 10, \u0026#34;flightId\u0026#34;: 1, \u0026#34;travelClass\u0026#34;:\u0026#34;Economy\u0026#34;, \u0026#34;ticketPrice\u0026#34;:\u0026#34;100\u0026#34;, \u0026#34;currencyCode\u0026#34;:\u0026#34;USD\u0026#34;, \u0026#34;paymentMode\u0026#34;:\u0026#34;CC\u0026#34;, \u0026#34;contactNumber\u0026#34;: \u0026#34;0928895717\u0026#34;, \u0026#34;contactEmail\u0026#34; : \u0026#34;phamhuutuanaws@gmail.com\u0026#34; } Tiếp theo qua tab Headers, thêm vào 1 key là Authorization, và value sẽ là access_token mà chúng ta có khi đăng nhập qua Cognito. Cuối cùng bấm nút Send Chúng ta sẽ xem kết quả, response sẽ có nội dung như sau. Trước tiên chúng ta sẽ nhận được 1 mail thông báo thành công. Và dữ liệu cũng sẽ được thêm vào 2 bảng (passenger và reservation) ứng với nội dung lệnh Json của chúng ta. Bảng reservation\nBảng passenger\n=\u0026gt; Đạt yêu cầu cho module 2 2. Đối với API Tìm chuyến bay (Module 1) Cũng với các thao tác tương tự, chúng ta cũng vào Postman, chúng ta thay đổi phương thức thành GET, sau đó thay đổi URL như dưới đây, chúng ta có thể thay đổi nội dung tìm kiếm. Và đây là kết quả trả về =\u0026gt; Đạt yêu cầu cho module 1 Vậy cả 2 API của chúng ta tạo ra đều hoạt động tốt, đều trả về response tương ứng.\n"
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/4-jpa-repository-interface-module1/",
	"title": "Dựng JPA Repository Interface",
	"tags": [],
	"description": "",
	"content": " Xây dựng JPA Repository Interface để truy cập dữ liệu từ Bảng MYSQL. Chỉ định các mẫu truy vấn cần thiết để lấy dữ liệu từ bảng airport và bảng flight. Mở lớp AirportRepository.java trong thư mục src/main/java/com.airlines.catalog/repository và thêm các import sau. Sử dụng prompt sau để tạo lớp AirportRepository. Prompt\r*Add a method to find airport by airport code*\rMở lớp FlightRepository.java trong thư mục. Sử dụng prompt sau để tạo lớp FlightRepository. Prompt\r*Create JPA repository interface FlightRepository.*\n*Add a method to find flights by departure date, departure airport code, arrival airport code that returns a iterable flight*\n*Add a method to get flight with Id as parameter and return the flight object*\rCode hoàn chỉnh cho lớp AirportRepository package com.airlines.catalog.repository; import com.airlines.catalog.model.Airport; import org.springframework.stereotype.Repository; import org.springframework.data.jpa.repository.JpaRepository; /* Create JPA repository interface named AirportRepository Add a method to find airport by airport code */ @Repository public interface AirportRepository extends JpaRepository\u0026lt;Airport, String\u0026gt; { Airport findByAirportCode(String airportCode); } Code hoàn chỉnh cho lớp FlightRepository package com.airlines.catalog.repository; import com.airlines.catalog.model.Flight; import org.springframework.stereotype.Repository; import org.springframework.data.jpa.repository.JpaRepository; /*Create JPA repository interface FlightRepository. Add a method to find flights by departure date, departure airport code, arrival airport code that returns a iterable flight Add a method to get flight with Id as parameter and return the flight object */ @Repository public interface FlightRepository extends JpaRepository\u0026lt;Flight, Integer\u0026gt; { Iterable\u0026lt;Flight\u0026gt; findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(String departureDate, String departureAirportCode, String arrivalAirportCode); Flight findById(int id); } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/4-unit-test-repository-classes-module2/",
	"title": "Unit test cho các lớp Repository ",
	"tags": [],
	"description": "",
	"content": " Tiếp theo, bạn sẽ xây dựng các unit test cho các lớp Repository - PassengerRepository và DepositRepositoryTest. Mở PassengerRepositoryTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau Tạo các unit test case cho lớp PassengerRepository bằng prompt cho Amazon Q Developer bên dưới. Prompt\rCreate Junit test cases for PassengerRepository using\rweb environment with random port.\rCreate test case for save method by creating test data for firstName, lastName, adult and gender.\rAssert that the passenger Id is not null\rChuột phải vào PassengerRepositoryTest, sau đó chọn vào Run PassengerRepositoryTest, nó sẽ chạy các test case trong lớp. Tôi đã pass được test case, và trong database cũng có dữ liệu test Tiếp theo chúng ta sẽ test cho lớp còn lại, mở ReservationRepositoryTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các câu import sau. Tạo lớp ReservedRepository bằng prompt với Amazon Q Developer sau đây, chúng ta sẽ xóa mọi code liên quan tới phương thức do Amazon Q tạo. Prompt\rCreate ReservationRepositoryTest class to test the reservationRepository class using\rSpringBootTest with web environment and random port\rSử dụng prompt Amazon Q Developer bên dưới để tạo phương thức cho test case đầu tiên Prompt\rCreate a test method for successful save with valid data\rAttributes; flightId,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber,\rcontactEmail, reservationStatus, reservationDate, reservationTime, paymentStatus and passengerId.\rAssert BookingReference is not null\rChuột phải vào ReservationRepositoryTest, sau đó chọn vào Run ReservationRepositoryTest để nó có thể chạy được toàn bộ test case trong lớp này. Tôi đã pass được test case, và dữ liệu test cũng đã xuất hiện trong database Code hoàn chỉnh cho lớp PassengerRepositoryTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import org.springframework.test.context.junit4.SpringRunner; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.repository.PassengerRepository; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; /* Create Junit test cases for PassengerRepository using web environment with random port. Create test case for save method by creating test data for firstName, lastName, adult and gender. Assert that the passenger Id is not null */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class PassengerRepositoryTest { @Autowired PassengerRepository passengerRepository; @Test public void savePassengerTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;Test\u0026#34;); passenger.setLastName(\u0026#34;Test\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;M\u0026#34;); passengerRepository.save(passenger); Assert.assertNotNull(passenger.getPassengerId()); } } Code hoàn chỉnh cho lớp ReservationRepositoryTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.repository.ReservationRepository; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; /* Create ReservationRepositoryTest class to test the reservationRepository class using SpringBootTest with web environment and random port */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class ReservationRepositoryTest { @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Autowired ReservationRepository reservationRepository; /* Create a test method for successful save with valid data Attributes; flightId,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, reservationDate, reservationTime, paymentStatus and passengerId. Assert BookingReference is not null */ @Test public void testSaveReservation() { Reservation reservation = new Reservation(); reservation.setFlightId(1); reservation.setTravelClass(\u0026#34;Economy\u0026#34;); reservation.setTicketPrice(1000); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;XXXXXXXXXXXXX\u0026#34;); reservation.setReservationStatus(\u0026#34;Confirmed\u0026#34;); reservation.setReservationDate(\u0026#34;2022-01-01\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setPassengerId(1); Reservation savedReservation = reservationRepository.save(reservation); Assert.assertNotNull(savedReservation.getBookingReference()); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/5-config-datasource-module1/",
	"title": "Cấu hình Datasource",
	"tags": [],
	"description": "",
	"content": " Bạn sẽ xây dựng Lớp Configuration để cấu hình thông tin xác thực database từ AWS Secrets Manager. Mở DataSourceConfig.java trong thư mục src/main/java/com.airlines.catalog/config và thêm các câu import sau. Sử dụng prompt sau để tạo lớp DataSourceConfig và nhận các cấu hình cần thiết từ tệp application.properties. Xóa mọi phương thức được tạo bên trong lớp bởi Amazon Q Developer. Prompt\r*Create public class DataSourceConfig and 2 member variables awsRegion and secretName. Autowire these variables with aws.region and secretmanager.key from application.properties file.*\r-Sử dụng prompt sau để tạo phương thức getSecret sẽ lấy chuỗi kết nối cơ sở dữ liệu từ AWS Secrets Manager.\nPrompt\r*Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using member variables awsRegion and secretName.*\rSử dụng prompt bên dưới để tạo phương thức getDataSource sẽ gọi phương thức getSecret và xây dựng data source object. Prompt\r*Create a method getDataSource to build the datasource object.*\n*Call the getSecret function. Parse the returned JSON string to extract host, port, db, username and password. Then configure the mysql url, username and password of the datasource object.*\n*Return the datasource object. Throw any Json Processing exception.*\nCode hoàn chỉnh cho lớp DataSourceConfig package com.airlines.catalog.config; import com.fasterxml.jackson.core.JsonProcessingException; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import software.amazon.awssdk.regions.Region; import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient; import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest; import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse; import software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException; import org.springframework.boot.jdbc.DataSourceBuilder; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import javax.sql.DataSource; /*Create public class DataSourceConfig and 2 member variables awsRegion and secretName. Autowire these variables with aws.region and secretmanager.key from application.properties file. */ @Configuration public class DataSourceConfig { @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${secretmanager.key}\u0026#34;) private String secretName; /* Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using member variables awsRegion and secretName. Catch and throw Secret Manager exceptions */ private String getSecret() { Region region = Region.of(awsRegion); SecretsManagerClient client = SecretsManagerClient.builder() .region(region) .build(); GetSecretValueRequest valueRequest = GetSecretValueRequest.builder() .secretId(secretName) .build(); GetSecretValueResponse valueResponse = client.getSecretValue(valueRequest); return valueResponse.secretString(); } /* Create a method getDataSource to build the datasource object. Call the getSecret function. Parse the returned JSON string to extract host, port, db, username and password. Then configure the mysql url, username and password of the datasource object. Return the datasource object. Throw any Json Processing exception. */ @Bean public DataSource getDataSource() throws JsonProcessingException { DataSourceBuilder\u0026lt;?\u0026gt; dataSourceBuilder = DataSourceBuilder.create(); String secret = getSecret(); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true); JsonNode jsonNode = objectMapper.readTree(secret); String host = jsonNode.get(\u0026#34;host\u0026#34;).asText(); int port = jsonNode.get(\u0026#34;port\u0026#34;).asInt(); String db = jsonNode.get(\u0026#34;db\u0026#34;).asText(); String username = jsonNode.get(\u0026#34;username\u0026#34;).asText(); String password = jsonNode.get(\u0026#34;password\u0026#34;).asText(); dataSourceBuilder.url(\u0026#34;jdbc:mysql://\u0026#34; + host + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; + db); dataSourceBuilder.username(username); dataSourceBuilder.password(password); return dataSourceBuilder.build(); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/5-clean-up/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " Chúng ta tiến hành xóa đi Stack mà chúng ta đã nạp file .yaml của Workshop cung cấp. Vào CloudFormation, vào mục Stacks và tick chọn vào stack mà lúc đó chúng ta tạo cho Workshop. Sau đó chúng ta bấm Delete, và chờ cho quá trình xóa hoàn thành, nó sẽ tự động xóa các tài nguyên liên quan. Chẳng hạn như EC2 instance mà chúng ta dùng trong suốt quá trình làm Lab thì đã tự động bị terminate. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/5-openning-project-intelij/",
	"title": "Mở Project trong Intelij IDE",
	"tags": [],
	"description": "",
	"content": " Bên trong EC2 instance, hãy mở thư mục C:/Users/Administrator/IdeaProjects/AppCodeArchive và bạn sẽ có thể thấy một thư mục Airline-Booking-PromptProject. Đây là dự án IntelliJ mà bạn sẽ sử dụng để thực hiện workshop. Bây giờ mở dự án đó với Intelij IDE Từ menu bên trái của Dự án IntelliJ, hãy mở rộng thư mục src và đi tới src/main/resources. Mở tệp \u0026ldquo;application.properties\u0026rdquo;. Cập nhật aws.region với region bạn đang chạy workshop và secretmanager.key dưới dạng RDSSecretForApp Vào CloudFormation, click vào stack lúc tạo. Sau đó chọn qua tab Outputs, nhận các giá trị của cognito.userpool.id từ trường CognitoProviderName (Phần cuối của URL) và sns.arn từ trường SNSTopic. Cập nhật giá trị cho các khóa này trong tệp application.properties. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/5-handle-bussiness-exceptions-module2/",
	"title": "Xử lý các Business Exceptions",
	"tags": [],
	"description": "",
	"content": " Tiếp theo, chúng sẽ tạo các lớp xử lý ngoại lệ để xử lý business exception: Dữ liệu đầu vào không hợp lệ đối với API đặt chỗ, Id chuyến bay không hợp lệ và không còn chỗ trống trên chuyến bay. Mở tệp GlobalExceptionHandler.java trong thư mục src/main/java/com.airlines.catalog/Exception, từ Amazon Q Chat Panel trong IDE của bạn, hãy sử dụng prompt bên dưới để tạo lớp GlobalExceptionHandler hoàn chỉnh. Sao chép mã đó vào GlobalExceptionHandler.java. Lớp này sẽ được sử dụng để xử lý các trường hợp ngoại lệ khi dữ liệu đầu vào không hợp lệ được cung cấp cho API bookFlight. Prompt\rCreate a rest controller advice GlobalExceptionHandler with handleValidationErrors method that gets all the errors and returns ResponseEntity with hash map Tiếp theo mở FlightNotFoundException.java trong thư mục src/main/java/com.airlines.catalog/exception và thêm các câu import sau. Sử dụng prompt bên dưới để xử lý ngoại lệ khi cung cấp Id chuyến bay không hợp lệ cho ngoại lệ đặt chỗ Prompt\rCreate a public class FlightNotFoundException that extends Runtime Exception with member variable response entity.\rCreate constructor with flightId as input parameter\rException message returned should be \"No flights found for the flight id \" and append flight id\rMở RequestedSeatsNotAvailable.java trong thư mục src/main/java/com.airlines.catalog/Exception và thêm các câu import sau. Hãy sử dụng prompt bên dưới để xử lý trường hợp ngoại lệ khi không còn chỗ trống trên chuyến bay để đặt chỗ. Prompt\rCreate a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable response entity and returns an exception message e \"Seats not available. Reservation could not be made\"\rCode hoàn chỉnh cho lớp GlobalExceptionHandler package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.validation.FieldError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import java.util.HashMap; import java.util.Map; @ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; handleValidationErrors(MethodArgumentNotValidException ex) { Map\u0026lt;String, String\u0026gt; errors = new HashMap\u0026lt;\u0026gt;(); ex.getBindingResult().getAllErrors().forEach(error -\u0026gt; { String fieldName = ((FieldError) error).getField(); String errorMessage = error.getDefaultMessage(); errors.put(fieldName, errorMessage); }); return new ResponseEntity\u0026lt;\u0026gt;(errors, HttpStatus.BAD_REQUEST); } } Code hoàn chỉnh cho lớp FlightNotFoundException package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /* Create a public class FlightNotFoundException that extends Runtime Exception with member variable response entity. Create constructor with flightId as input parameter Exception message returned should be \u0026#34;No flights found for the flight id \u0026#34; and append flight id */ @Getter public class FlightNotFoundException extends RuntimeException { private ResponseEntity\u0026lt;String\u0026gt; responseEntity; public FlightNotFoundException(String flightId) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found for the flight id \u0026#34; + flightId, HttpStatus.BAD_REQUEST); } } Code hoàn chỉnh cho lớp RequestedSeatsNotAvailable package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /* Create a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable response entity and returns an exception message e \u0026#34;Seats not available. Reservation could not be made\u0026#34; */ @Getter public class RequestedSeatsNotAvailable extends RuntimeException { private ResponseEntity\u0026lt;String\u0026gt; responseEntity; public RequestedSeatsNotAvailable() { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Seats not available. Reservation could not be made\u0026#34;, HttpStatus.BAD_REQUEST); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/1-config-environment/6-setup-amazonq/",
	"title": "Thiết lập Amazon Q Developer trong JetBrains Intelij",
	"tags": [],
	"description": "",
	"content": " Từ thanh công cụ bên phải JetBrains panel, chọn Biểu tượng Chọn Amazon Q để mở Cửa sổ trò chuyện Amazon Q. Sau đó chọn Use for free và nhấp vào nút Continue. Sau khi đăng nhập xong và tạo 1 Builder ID, chúng ta có thể dùng AmazonQ trong JetBrains. "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/6-service-classes-module2/",
	"title": "Xây dựng các lớp service",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ xây dựng lớp service FlightBooking tạo database transaction mới để lưu hành khách, dữ liệu đặt chỗ vào các bảng tương ứng và cũng gửi thông báo SNS đặt chỗ-thành công ( reservation-success topic). Một thông báo email sẽ được gửi đến địa chỉ email được cấu hình. Phương pháp này cũng sẽ kiểm tra tình trạng chỗ trống trước khi tiến hành đặt chỗ và đưa ra ngoại lệ kinh doanh nếu không có chỗ. Mở FlightBooking.java trong thư mục src/main/java/com.airlines.catalog/service và thêm các import sau. Trong lớp FlightBooking, hãy sử dụng prompt sau để tạo phương thức sendNotification. Điều này sẽ gửi thông báo đến SNS topic. Prompt\rCreate a method send message with message, sns arn and AWS Region as input parameter Thêm một phương thức khác ReserveFlight bằng cách sử dụng prompt bên dưới. Điều này sẽ thực hiện logic cần thiết để xác thực dữ liệu, lưu dữ liệu bằng các phương thức repository được tạo trước đó và gửi thông báo bằng phương thức sendNotification đã tạo ở trên. Prompt\rCreate reserveFlight method with passenger, reservation, passengerRepository, reservationRepository,flightresultsRepository, number of passengers, topicArn and region as input parameters. Method should return a Boolean output\rGet the flight details by calling findById method from FlightresultsRepository with flightId as input parameter if no of flight is null throw FlightNotFoundException\rCall getSeatAvailable from flight object to get the available seats\rIf number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception\rIf seats available is greater than or equal to number of passengers then\rdecrease the seats available attribute in flight object by calling setseatAvailable method\rSave the passenger and get the passenger id\rupdate the reservation object with the passenger id save the reservation details call sendMessage by passing reservation json string as input parameter\rMethod should return True or False based on the result of save methods\rAll of the above steps should be done within a transaction.\rCode hoàn chỉnh cho phương thức sendNotification @Service public class FlightBooking { /* create a method send message with message, sns arn and AWS Region as input parameter */ public static void sendMessage(String message, String topicArn, Region region) { SnsClient snsClient = SnsClient.builder() .region(region) .build(); PublishRequest request = PublishRequest.builder() .message(message) .topicArn(topicArn) .build(); PublishResponse result = snsClient.publish(request); System.out.println(\u0026#34;Message sent successfully. Message ID: \u0026#34; + result.messageId()); } } Code hoàn chỉnh cho lớp FlightBooking package com.airlines.catalog.service; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import com.airlines.catalog.model.Flight; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.ReservationRepository; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional; import software.amazon.awssdk.regions.Region; import software.amazon.awssdk.services.sns.SnsClient; import software.amazon.awssdk.services.sns.model.PublishRequest; import software.amazon.awssdk.services.sns.model.PublishResponse; @Service public class FlightBooking { /* create a method send message with sns arn and AWS Region as input parameter*/ public void sendMessage(String message, String arn, Region region) { SnsClient snsClient = SnsClient.builder() .region(region) .build(); PublishRequest request = PublishRequest.builder() .message(message) .topicArn(arn) .build(); PublishResponse result = snsClient.publish(request); System.out.println(result.messageId() + \u0026#34; Message sent. Status is \u0026#34; + result.sdkHttpResponse().statusCode()); snsClient.close(); } /* Create reserveFlight method with passenger, reservation, passengerRepository, reservationRepository,flightresultsRepository, number of passengers, topicArn and region as input parameters. Method should return a Boolean output Get the flight details by calling findById method from FlightresultsRepository with flightId as input parameter if no of flight is null throw FlightNotFoundException Call getSeatAvailable from flight object to get the available seats If number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception If seats available is greater than or equal to number of passengers then decrease the seats available attribute in flight object by calling setseatAvailable method Save the passenger and get the passenger id update the reservation object with the passenger id save the reservation details call sendMessage by passing reservation json string as input parameter Method should return True or False based on the result of save methods All of the above steps should be done within a transaction. */ @Transactional(propagation = Propagation.REQUIRED) public Boolean reserveFlight(Passenger passenger, Reservation reservation, PassengerRepository passengerRepository, ReservationRepository reservationRepository, FlightRepository flightRepository, int numberOfPassengers, String topicArn, Region region) throws FlightNotFoundException, RequestedSeatsNotAvailable { Flight flight = flightRepository.findById(reservation.getFlightId()); if (flight == null) { throw new FlightNotFoundException(reservation.getFlightId()); } if (flight.getSeatAvailable() \u0026lt; numberOfPassengers) { throw new RequestedSeatsNotAvailable(); } flight.setSeatAvailable(flight.getSeatAvailable() - numberOfPassengers); flightRepository.save(flight); Passenger passenger1 = passengerRepository.save(passenger); reservation.setPassengerId(passenger1.getPassengerId()); reservationRepository.save(reservation); sendMessage(reservation.toString(), topicArn, region); return true; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/6-service-classes-module1/",
	"title": "Xây dựng các lớp Service",
	"tags": [],
	"description": "",
	"content": " Bạn sẽ xây dựng lớp service lấy dữ liệu từ bảng flight để có được các chuyến bay có sẵn dựa trên các thông số đầu vào. Nó trả về một đối tượng FlightDetails. Mở FlightDetailsService.java trong thư mục src/main/java/com.airlines.catalog/service và thêm các import sau. Tiếp theo chúng ta tạo lớp FlightDetailService. Trong lớp FlightDetailsService, hãy sử dụng prompt sau để tạo phương thức populateFlightDetails. Prompt\r*Create private method populateFlightDetails method which takes flight, arrival airport and departure airport as input parameters and returns flightDetails object.*\rBên trong phương thức populateFlightDetails, hãy sử dụng prompt sau để thêm thông tin chi tiết về chuyến bay (flight) và sân bay (airport) vào FlightDetails DTO. Prompt\r*Match and Assign all the attributes from flight, arrivalAirport and departureAirport object to flightDetails object.*\rTạo phương thức findFlight bằng cách sử dụng prompt bên dưới. Chạy từng prompt một. Prompt1\rCreate a method for findFlights which takes departureDate, departureAirportCode, arrivalAirportCode, flightRepository and airportRepository as parameters and returns a list of flightDetails object.\rPrompt2\rFirst call the flightRepository findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method to get the iterable object of flight.\rPrompt3\rLoop through the flights\rFor each flight in the flights object call\rAirportRepository findByAirportCode to get departureAiport\rAirportRepository findByAirportCode to get arrivalAiport\rpopulateFlightDetails method to get flightDetails object.\rCode hoàn chỉnh cho lớp FlightDetailsService package com.airlines.catalog.service; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.model.Airport; import com.airlines.catalog.model.Flight; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.ArrayList; import java.util.List; /* Create FlightDetailsService class */ @Service public class FlightDetailsService { @Autowired FlightRepository flightRepository; @Autowired AirportRepository airportRepository; /* Create private method populateFlightDetails method which takes flight, arrival airport and departure airport as input parameters and returns flightDetails object. */ private FlightDetails populateFlightDetails(Flight flight, Airport arrivalAirport, Airport departureAirport) { /* Match and Assign all the attributes from flight, arrivalAirport and departureAirport object to flightDetails object. */ FlightDetails flightDetails = new FlightDetails(); flightDetails.setFlightId(flight.getId()); flightDetails.setDepartureDate(flight.getDepartureDate()); flightDetails.setDepartureTime(flight.getDepartureTime()); flightDetails.setArrivalDate(flight.getArrivalDate()); flightDetails.setArrivalTime(flight.getArrivalTime()); flightDetails.setArrivalAirportCode(arrivalAirport.getAirportCode()); flightDetails.setArrivalAirportName(arrivalAirport.getAirportName()); flightDetails.setArrivalAirportCity(arrivalAirport.getAirportCity()); flightDetails.setArrivalAirportLocale(arrivalAirport.getAirportLocale()); flightDetails.setDepartureAirportCode(departureAirport.getAirportCode()); flightDetails.setDepartureAirportName(departureAirport.getAirportName()); flightDetails.setDepartureAirportCity(departureAirport.getAirportCity()); flightDetails.setDepartureAirportLocale(departureAirport.getAirportLocale()); flightDetails.setFlightDuration(flight.getFlightDuration()); flightDetails.setTicketPrice(flight.getTicketPrice()); flightDetails.setTicketCurrency(flight.getTicketCurrency()); flightDetails.setSeatAvailable(flight.getSeatAvailable()); flightDetails.setFlightNumber(flight.getFlightNumber()); return flightDetails; } /* Create a method for findFlights which takes departureDate, departureAirportCode, arrivalAirportCode, flightRepository and airportRepository as parameters and returns a list of flightDetails object */ public List\u0026lt;FlightDetails\u0026gt; findFlights(String departureDate, String departureAirportCode, String arrivalAirportCode, FlightRepository flightRepository, AirportRepository airportRepository) { /* first call the flightRepository findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method to get the iterable object of flight.*/ Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); /* Loop through the flights object. For each flight in the flights object call AirportRepository findByAirportCode to get departureAiport call AirportRepository findByAirportCode to get arrivalAiport call populateFlightDetails method to get flightDetails object. */ List\u0026lt;FlightDetails\u0026gt; flightDetailsList = new ArrayList\u0026lt;\u0026gt;(); for (Flight flight : flights) { Airport departureAirport = airportRepository.findByAirportCode(flight.getDepartureAirportCode()); Airport arrivalAirport = airportRepository.findByAirportCode(flight.getArrivalAirportCode()); FlightDetails flightDetails = populateFlightDetails(flight, arrivalAirport, departureAirport); flightDetailsList.add(flightDetails); } return flightDetailsList; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/7-unit-test-flightbooking-service-classes/",
	"title": "Unit Test Lớp service FlightBooking",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ xây dựng unit test script cho FlightBooking service với Junit. Các test script sẽ tích hợp với các dịch vụ phụ trợ và dịch vụ AWS. Mở FlightBookingServiceTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các câu import sau. Tạo lớp để test FlightBooking service, dùng prompt sau. Prompt\rCreate FlightBookingServiceTest class to test the flightBooking service using web environment with random port.\rAutowire sns.arn, aws.region from properties file\rKịch bản thử nghiệm đầu tiên - việc đặt trước thành công với các tham số đầu vào hợp lệ. Việc đặt chỗ phải thành công với dữ liệu được lưu trong hành khác (passenger), bảng đặt chỗ (reservation) và nhận được email thông báo. Prompt\rCreate reserve flight success test method.\rCreate Passenger object by setting attributes firstName, lastName, Adult=true and gender=male\rcreate Reservation object class by setting attributes flightId=1,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus,passengerId, reservationDate,\rreservationTime, paymentStatus\rCreate AWS region object\rThêm đoạn code này để gọi phương thức reserveFlight Code\rAssert.assertTrue(flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 1, snsArn, region));\rKịch bản thử nghiệm thứ hai - kịch bản thất bại trong việc đặt chỗ với id chuyến bay không hợp lệ làm đầu vào Prompt\rCreate reserve flight invalid flightId test method.\rCreate passenger object by setting attributes firstName, lastName, Adult=true and gender\rCreate reservation object class by setting attributes flightId=10000,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate,\rreservationTime, paymentStatus\rCreate AWS region object\rasset if the exception contains 'No flights found\"\rNếu khối lệnh try/catch không được thêm vào xung quanh phương thức ReserveFlight, vui lòng thêm vào. Amazon Q developer sẽ cung cấp đề xuất theo từng dòng Cập nhật số cột còn trống (seat_available) trong bảng chuyến bay (flight) thành 0 cho id=5 bằng cách chạy câu lệnh SQL bên dưới trong MYSQL Workbench. Code\rupdate flight set seat_available =0 where id=5; Kịch bản thử nghiệm thứ ba - kịch bản đặt chỗ thất bại vì không còn chỗ trống cho id chuyến bay được yêu cầu. Prompt\rCreate reserve flight insufficient seats method.\rCreate passenger object by setting attributes firstName, lastName, Adult=true and gender\rCreate reservation object class by setting attributes flightId=5,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId,\rreservationDate, reservationTime, paymentStatus\rCreate AWS region object.\rasset if the exception contains 'Seats not available\".\rMột lần nữa, nếu khối code try/catch không được thêm vào xung quanh phương thức ReserveFlight, vui lòng thêm vào. Amazon Q developer sẽ cung cấp đề xuất theo từng dòng Chúng ta sẽ tiến hành chạy các test case vừa tạo, và tôi đã pass 3 test case Tiếp theo ta check database để xem các test case đặt chỗ thành công có được thêm data vào database hay không. Chúng ta sẽ check dữ liệu ở cả bảng passenger và reservation, tiếp đó là chúng ta sẽ nhận được email thông báo, đáp ứng các điều trên thì tôi đã thành công. Code hoàn chỉnh cho lớp FlightBookingServiceTest package com.airlines.catalog.test; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.repository.ReservationRepository; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightBooking; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import software.amazon.awssdk.regions.Region; /* Create FlightBookingTest class to test the FlightBooking service using web environment with random port. Autowire sns.arn, aws.region from properties file */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightBookingServiceTest { @Autowired FlightBooking flightBooking; @Autowired FlightRepository flightRepository; @Autowired PassengerRepository passengerRepository; @Autowired ReservationRepository reservationRepository; @Value(\u0026#34;${sns.arn}\u0026#34;) String snsArn; @Value(\u0026#34;${aws.region}\u0026#34;) String awsRegion; /* Create reserve flight success test method. Create Passenger object by setting attributes firstName, lastName, Adult=true and gender=male create Reservation object class by setting attributes flightId=1,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus,passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object */ @Test public void reserveFlightSuccessTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;XXXX\u0026#34;); passenger.setLastName(\u0026#34;XXX\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(1); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;abc@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); Assert.assertTrue(flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 1, snsArn, region)); } /* Create reserve flight invalid flightId test method. Create passenger object by setting attributes firstName, lastName, Adult=true and gender Create reservation object class by setting attributes flightId=10000,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object asset if the exception contains \u0026#39;No flights found\u0026#34; */ @Test public void reserveFlightInvalidFlightIdTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;XXXX\u0026#34;); passenger.setLastName(\u0026#34;XXX\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(10000); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;abc@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); try { Assert.assertThrows(FlightNotFoundException.class, () -\u0026gt; flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 10000, snsArn, region)); } catch (FlightNotFoundException e) { Assert.assertEquals(\u0026#34;No flights found\u0026#34;, e.getMessage()); } } /* Create reserve flight insufficient seats method. Create passenger object by setting attributes firstName, lastName, Adult=true and gender Create reservation object class by setting attributes flightId=5,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object. asset if the exception contains \u0026#39;Seats not available\u0026#34;. */ @Test public void reserveFlightInsufficientSeatsTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;Test\u0026#34;); passenger.setLastName(\u0026#34;Test\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(5); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;test@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); try { Assert.assertThrows(RequestedSeatsNotAvailable.class, () -\u0026gt; flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 5, snsArn, region)); } catch (RequestedSeatsNotAvailable e) { Assert.assertEquals(\u0026#34;Seats not available\u0026#34;, e.getMessage()); } } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/7-unit-test-repository-classes-module1/",
	"title": "Unit Testing cho các lớp Repository",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ unit test các lớp reposity. Việc kiểm tra sẽ được thực hiện bằng cách tích hợp trực tiếp với RDS (No Mocking). Mở AirportRepositoryTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau Sử dụng prompt bên dưới để xây dựng các unit test case cho lớp AirportRepository Prompt\r*Create AirportRepositoryTest class to test the AirportRepository class using web environment with random port.*\n*First negative test case: method with Invalid airport code - \"LHG\" which should assert a null object*\n*Second positive test case: method with valid airport code - \"LHR\" which should assert a not null object*\nBấm vào mũi tên bên trái khai báo lớp AirportRepositoryTest và chọn Run AirportRepositoryTest. Nó sẽ chạy tất cả các test case trong lớp. Nếu bất kỳ test nào không thành công, hãy kiểm tra lỗi springboot trong IDE. Nếu exception là do lỗi cấu hình HibernateJpaConfiguration, hãy kiểm tra tệp \u0026ldquo;application.properties\u0026rdquo; để đảm bảo các giá trị phù hợp được điền cho aws.zone và secretmanager.key. Đồng thời kiểm tra xem security group cho RDS có cho phép liên lạc từ IP của máy nơi chương trình này đang chạy hay không. Nếu Spring Boot khởi động thành công thì hãy kiểm tra mã xác nhận và xác minh rằng dữ liệu thử nghiệm trong bảng Airport đã được điền theo test case. Tôi đã tiến hành chạy và đều pass tất cả các test case. Mở FlightRepositoryTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau: Xây dựng các Unit test case cho lớp FlightRepository bằng cách sử dụng prompt bên dưới. Prompt\r*Create FlightRepositoryTest class to test the FlightRepository class using web environment with random port.*\n*Test cases for testing findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method that returns an iterable.*\n*First test case method with no results using departure date as \"2023-08-01\", departure airport code as \"CDG\" and arrival airport code as \"LAX\".*\n*Second test case method with single results using departure date as \"2023-08-02\", departure airport code as \"LHR\" and arrival airport code as \"CDG\" .*\n*Third test case method with multiple results using departure date as \"2023-08-01\", departure airport code as \"MIA\" and arrival airport code as \"LAX\".*\nNhấp vào mũi tên ở bên trái khai báo lớp FlightRepositoryTest và chọn Run FlightRepositoryTest. Nó sẽ chạy tất cả các test case trong lớp. Nếu bất kỳ test nào không thành công, hãy kiểm tra lỗi springboot trong IDE. Nếu exception là do lỗi cấu hình HibernateJpaConfiguration, hãy kiểm tra tệp \u0026ldquo;application.properties\u0026rdquo; để đảm bảo các giá trị phù hợp được điền cho aws.zone và secretmanager.key. Nếu Spring Boot khởi động thành công thì hãy kiểm tra mã xác nhận và xác minh rằng dữ liệu thử nghiệm trong flight bay đã được điền theo trường hợp thử nghiệm. Tôi đã chạy và cả 3 test case đều pass Code hoàn chỉnh cho lớp FlightRepositoryTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Flight; import com.airlines.catalog.repository.FlightRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; /* Create FlightRepositoryTest class to test the FlightRepository class using web environment with random port. Test cases for testing findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method that returns an iterable. First test case method with no results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;CDG\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;. Second test case method with single results using departure date as \u0026#34;2023-08-02\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34; and arrival airport code as \u0026#34;CDG\u0026#34; . Third test case method with multiple results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;MIA\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightRepositoryTest { @Autowired private FlightRepository flightRepository; @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_NoResults() { String departureDate = \u0026#34;2023-08-01\u0026#34;; String departureAirportCode = \u0026#34;CDG\u0026#34;; String arrivalAirportCode = \u0026#34;LAX\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertFalse(flights.iterator().hasNext()); } @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_SingleResult() { String departureDate = \u0026#34;2023-08-02\u0026#34;; String departureAirportCode = \u0026#34;LHR\u0026#34;; String arrivalAirportCode = \u0026#34;CDG\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertTrue(flights.iterator().hasNext()); Assert.assertEquals(1, flights.spliterator().getExactSizeIfKnown()); } @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_MultipleResults() { String departureDate = \u0026#34;2023-08-01\u0026#34;; String departureAirportCode = \u0026#34;MIA\u0026#34;; String arrivalAirportCode = \u0026#34;LAX\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertTrue(flights.iterator().hasNext()); Assert.assertEquals(2, flights.spliterator().getExactSizeIfKnown()); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/8-dto-reservation-details/",
	"title": "Tạo chi tiết đặt chỗ DTO (DTO Reservation Details)",
	"tags": [],
	"description": "",
	"content": " Bây giờ, chúng ta sẽ tạo một lớp DTO DepositDetails sẽ được sử dụng để xác thực tất cả và nắm bắt các tham số đầu vào được cung cấp cho API bookFlight.\nMở ReservationDetails.java trong thư mục src/main/java/com.airlines.catalog/dto.\nTừ Amazon Q Chat Panel trong IDE của bạn, hãy sử dụng prompt bên dưới để tạo lớp ReservationDetails. Sau khi có code thì dán code vào ReservationDetails.java. Prompt\rCreate a class ReservationDetails with attributes\rfirstName not blank, lastName not blank,\rgender, age between 1 and 120, flightId as int, travelClass not blank,\rticketPrice as double and not blank,\rcurrencyCode exactly 3 characters, reservationStatus, paymentStatus,\rpaymentMode, ContactEmail should be valid email, contactNumber should be valid phone number\rCode hoàn chỉnh cho lớp ReservationDetails\npackage com.airlines.catalog.dto; import lombok.Data; import javax.validation.constraints.Email; import javax.validation.constraints.Min; import javax.validation.constraints.Max; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Pattern; import javax.validation.constraints.Positive; @Data public class ReservationDetails { @NotBlank(message = \u0026#34;First name cannot be blank\u0026#34;) private String firstName; @NotBlank(message = \u0026#34;Last name cannot be blank\u0026#34;) private String lastName; private String gender; @Min(value = 1, message = \u0026#34;Age should be between 1 and 120\u0026#34;) @Max(value = 120, message = \u0026#34;Age should be between 1 and 120\u0026#34;) private int age; @Positive(message = \u0026#34;Flight ID must be a positive integer\u0026#34;) private int flightId; @NotBlank(message = \u0026#34;Travel class cannot be blank\u0026#34;) private String travelClass; @Positive(message = \u0026#34;Ticket price must be a positive value\u0026#34;) private double ticketPrice; @Pattern(regexp = \u0026#34;^[A-Z]{3}$\u0026#34;, message = \u0026#34;Currency code must be exactly 3 uppercase letters\u0026#34;) private String currencyCode; private String reservationStatus; private String paymentStatus; private String paymentMode; @Email(message = \u0026#34;Invalid email address\u0026#34;) private String contactEmail; @Pattern(regexp = \u0026#34;^\\\\d{10}$\u0026#34;, message = \u0026#34;Contact number must be a 10-digit number\u0026#34;) private String contactNumber; } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/8-unit-test-service-classes-module1/",
	"title": "Unit Test lớp service",
	"tags": [],
	"description": "",
	"content": " Bây giờ bạn sẽ unit test lớp FlightDetailsService bằng Junit. Các test case này sẽ xác thực luồng từ service đến cơ sở dữ liệu. Mở FlightDetailsServiceTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau. Tạo lớp kiểm tra FlightDetailsService Kịch bản thử nghiệm đầu tiên: Không tìm thấy chuyến bay nào có ngày khởi hành, thành phố xuất phát và điểm đến. Dùng prompt sau. Prompt\rFirst test case method with no results using departure date as \"2023-08-01\", departure airport code as \"CDG\" and arrival airport code as \"LAX\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 0\rKịch bản thử nghiệm thứ hai: Chỉ tìm thấy một chuyến bay có ngày khởi hành, thành phố xuất phát và điểm đến, dùng prompt sau. Prompt\rSecond test case method with single results using departure date as \"2023-08-02\", departure airport code as \"LHR\", arrival airport code as \"CDG\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 1\rKịch bản thử nghiệm thứ ba: Tìm thấy hai chuyến bay có ngày khởi hành, thành phố xuất phát và điểm đến, dùng prompt sau. Prompt\rThird test case method with multiple results using departure date as \"2023-08-01\", departure airport code as \"LHR\", arrival airport code as \"CDG\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 2\rSau khi hoàn tất file, thì chúng ta nhấp vào mũi tên ở bên trái khai báo lớp FlightDetailsServiceTest và chọn Run FlightDetailsServiceTest. Nó sẽ chạy tất cả các test case trong lớp. Nếu bất kỳ test case nào không thành công, hãy kiểm tra lỗi springboot trong IDE. Code hoàn chỉnh cho lớp FlightDetailsServiceTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.service.FlightDetailsService; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import java.util.ArrayList; import java.util.List; /* Create FlightDetailsServiceTest class to test the FlightDetailsService using web environment with random port. Test cases for testing findFlights method in this class which returns list of flightDetails. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightDetailsServiceTest { @Autowired FlightDetailsService flightDetailsService; @Autowired FlightRepository flightRepository; @Autowired AirportRepository airportRepository; @Value(\u0026#34;${server.port}\u0026#34;) private int port; /* First test case method with no results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;CDG\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 0 */ @Test public void findFlightsTest() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-01\u0026#34;, \u0026#34;CDG\u0026#34;, \u0026#34;LAX\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(0, flightDetailsList.size()); } /* Second test case method with single results using departure date as \u0026#34;2023-08-02\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34;, arrival airport code as \u0026#34;CDG\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 1 */ @Test public void findFlightsTest2() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-02\u0026#34;, \u0026#34;LHR\u0026#34;, \u0026#34;CDG\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(1, flightDetailsList.size()); } /* Third test case method with multiple results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34;, arrival airport code as \u0026#34;CDG\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 2 */ @Test public void findFlightsTest3() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-01\u0026#34;, \u0026#34;LHR\u0026#34;, \u0026#34;CDG\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(2, flightDetailsList.size()); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/9-get-cognito-pkeys-module1/",
	"title": "Lấy Cognito public keys",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ xây dựng lớp RSA Key provider để lấy Cognito public key. Điều này sẽ được sử dụng để xác minh JWT Token sau này. Mở AwsCognitoRSAKeyProvider.java trong thư mục src/main/java/com.airlines.catalog/controller và thêm các import sau Dưới đây là prompt của Amazon Q Developer để tạo lớp. Prompt\rCreate AwsCognitoRSAKeyProvider class to implement methods for public key verification.\rURL is provided as input\rAdd other mandatory methods to implement the interface . Handle all the exceptions\rCode hoàn chỉnh cho lớp AwsCognitoRSAKeyProvider package com.airlines.catalog.controller; import com.auth0.jwk.JwkException; import com.auth0.jwk.JwkProvider; import com.auth0.jwk.JwkProviderBuilder; import com.auth0.jwt.interfaces.RSAKeyProvider; import java.net.MalformedURLException; import java.net.URL; import java.security.interfaces.RSAPrivateKey; import java.security.interfaces.RSAPublicKey; /* create a AwsCognitoRSAKeyProvider class to implement methods for public key verification. URL is provided as input Add other mandatory methods to implement the interface. Handle all the exceptions. */ public class AwsCognitoRSAKeyProvider implements RSAKeyProvider { private final JwkProvider provider; public AwsCognitoRSAKeyProvider(String url) throws MalformedURLException { provider = new JwkProviderBuilder(new URL(url)).build(); } @Override public RSAPublicKey getPublicKeyById(String kid) { try { return (RSAPublicKey) provider.get(kid).getPublicKey(); } catch (JwkException e) { e.printStackTrace(); } return null; } @Override public RSAPrivateKey getPrivateKey() { return null; } @Override public String getPrivateKeyId() { return null; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/9-book-flight-api-controller/",
	"title": "Tạo Controller API đặt chuyến bay",
	"tags": [],
	"description": "",
	"content": " Cuối cùng, thêm phương thức bookFlight vào controller được tạo trước đó để cung cấp khả năng đặt chỗ chuyến bay. Mở FlightReservation.java trong thư mục src/main/java/com.airlines.catalog/controller và thêm các import mới. Code\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\rTự động kết nối các service và reposity mới được tạo Code\r@Autowired\nPassengerRepository passengerRepository;\n@Autowired\nReservationRepository reservationRepository;\n@Autowired\nFlightBooking flightBooking;\rTừ bây giờ, hãy thực hiện theo cách tiếp cận từng dòng prompt để tạo đề xuất mã cho phương thức bookFlight. Sử dụng lời nhắc bên dưới để tạo phương thức controller còn lại. Prompt\r```\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string\rAuthorization token is passed in the header of the request.\r```\rXác thực JWT token được chuyển trong Authorization Header. Prompt\r```\rvalidate the token by calling verifyToken method in a try catch block. If token is valid set\rauthenticated flag to true\rCatch authenticationException and return the response entity object\rfrom the exception object\r```\rTạo Passenger Entity từ request body. Prompt\rcreate passenger object assign first name, last name and gender of passenger object from reservationDetails object\rKiểm tra xem hành khách có phải là người lớn hay không. Prompt\rCheck the age from reservationDetails object and populate adult field\rTạo Reservation Entity request body. Áp dụng prompt dưới đây. Prompt\r```\rcreate reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode ```\rPrompt\rset the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time\rBây giờ, hãy thêm code bên dưới để đặt chỗ. Boolean result; try { int noOfPassengers = 1; Region region = Region.of(awsRegion); result = FlightBooking.reserveFlight(passenger, reservation, PassengerRepository, ReservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region); } catch (FlightNotFoundException e) { return e.getResponseEntity(); } catch (RequestedSeatsNotAvailable e) { return e.getResponseEntity(); } Kiểm tra kết quả thực thi service và trả về phản hồi từ API. Prompt\r```\rcheck if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \"reservation made successfully\" appending the reservation booking Reference number\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request\r```\rCode hoàn chỉnh mới của lớp FlightReservation package com.airlines.catalog.controller; import java.nio.channels.ScatteringByteChannel; import java.util.List; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.exception.AuthenticationException; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightDetailsService; import com.auth0.jwt.JWT; import com.auth0.jwt.JWTVerifier; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.interfaces.DecodedJWT; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.ReservationRepository; import com.airlines.catalog.service.FlightBooking; import com.airlines.catalog.dto.ReservationDetails; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.model.Reservation; import org.springframework.web.bind.annotation.*; import software.amazon.awssdk.regions.Region; import javax.validation.Valid; @RestController public class FlightReservation { @Autowired FlightRepository flightresultsRepository; @Autowired AirportRepository airportresultsRepository; @Autowired FlightDetailsService FlightDetailsService; @Autowired PassengerRepository passengerRepository; @Autowired ReservationRepository reservationRepository; @Autowired FlightBooking flightBooking; @Value(\u0026#34;${cognito.userpool.id}\u0026#34;) private String cognitoUserPoolId; @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${sns.arn}\u0026#34;) private String snsTopicArn; /* Create a private method verifyToken to verify JWT token with input parameters as Cognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. catch all Exception throw new authenticationException.*/ private Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException { try { System.out.println(\u0026#34;token=\u0026#34; + token); String cognitoWellKnownUrl = \u0026#34;https://cognito-idp.\u0026#34; + awsRegion + \u0026#34;.amazonaws.com/\u0026#34; + cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;; Algorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl)); JWTVerifier verifier = JWT.require(algorithm).build(); DecodedJWT decodedJWT = verifier.verify(token); return true; } catch (Exception e) { throw new AuthenticationException(e); } } /* Create a rest controller getFlightDetails to get flight details with HTTP GET Method , /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header. Rest controller returns a ResponseEntity of string. */ @GetMapping(\u0026#34;/flight\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate, @RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode, @RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException { /* Call verifyToken method, catch authentication exception and return the responseEntity if token is valid and call the findFlights method in FlightDetailsService class with input parameters departure date, departure airport code, arrival airport code, flightResultsRepository and airportResultsRepository. If flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;. If authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden */ try { if (verifyToken(cognitoUserPoolId, awsRegion, authorization)) { List\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository); if (flights.size() \u0026gt; 0) { return new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK); } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK); } } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } } catch (AuthenticationException e) { return e.getResponseEntity(); } } /* Create a rest controller bookFlight to get flight details with HTTP POST Method , /reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string. Authorization token is passed in the header of the request. */ @PostMapping(\u0026#34;/reserve\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; bookFlight(@Valid @RequestBody ReservationDetails reservationDetails, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws FlightNotFoundException, RequestedSeatsNotAvailable { ResponseEntity\u0026lt;String\u0026gt; responseEntity = null; /*validate the token by calling verifyToken method in a try catch block. If token is valid set authenticated flag to true Catch authenticationException and return the response entity object from the exception object */ Boolean authenticated = false; try { authenticated = verifyToken(cognitoUserPoolId, awsRegion, authorization); } catch (AuthenticationException e) { return e.getResponseEntity(); } if (!authenticated) { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } /* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */ Passenger passenger = new Passenger(); passenger.setFirstName(reservationDetails.getFirstName()); passenger.setLastName(reservationDetails.getLastName()); passenger.setGender(reservationDetails.getGender()); //Check the age from reservationDetails object and populate adult field if (reservationDetails.getAge() \u0026gt;= 18) { passenger.setAdult(true); } /* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail, contactNumber, reservationStatus, paymentStatus, paymentMode */ Reservation reservation = new Reservation(); reservation.setFlightId(reservationDetails.getFlightId()); reservation.setTravelClass(reservationDetails.getTravelClass()); reservation.setTicketPrice(reservationDetails.getTicketPrice()); reservation.setCurrencyCode(reservationDetails.getCurrencyCode()); reservation.setContactEmail(reservationDetails.getContactEmail()); reservation.setContactNumber(reservationDetails.getContactNumber()); reservation.setReservationStatus(\u0026#34;CONFIRMED\u0026#34;); reservation.setPaymentStatus(\u0026#34;PAID\u0026#34;); reservation.setPaymentMode(reservationDetails.getPaymentMode()); /* set the date reservation date in yyyy-MM-dd format and reservation time in HH:mm:ss format for current date and time*/ java.util.Date utilDate = new java.util.Date(); java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;); java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); String date = dateFormat.format(utilDate); String time = timeFormat.format(utilDate); reservation.setReservationDate(date); reservation.setReservationTime(time); Boolean result; try { int noOfPassengers = 1; Region region = Region.of(awsRegion); result = flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region); } catch (FlightNotFoundException e) { return e.getResponseEntity(); } catch (RequestedSeatsNotAvailable e) { return e.getResponseEntity(); } /* check if the reservation is successful return response entity object with HTTP status of ok and message \u0026#34;reservation made successfully\u0026#34; appending the booking Reference if the reservation is not successful return response entity object with HTTP status of Internal Server Error */ if (result) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK); } else { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.INTERNAL_SERVER_ERROR); } return responseEntity; } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/3-module-2-flight-reservation-api/10-unit-test-reserve-flight-api/",
	"title": "Unit test cho  API đặt chỗ chuyến bay",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ tạo tập lệnh test Junit và unit test API chuyến bay dự trữ. API sẽ được thử nghiệm thông qua Postman. Mở ReserveFlightApiTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau Code\rimport com.airlines.catalog.FlightBookingApplication;\nimport com.airlines.catalog.dto.ReservationDetails;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport static org.assertj.core.api.Assertions.assertThat;\nChúng ta dùng prompt dưới đây để tiến hành tạo lớp ReserveFlightApiTest, và xóa đi các method do Amazon Q chat tạo ra. Prompt\rCreate a ReserveFlightApiTest class to test the bookingApi using SpringBootTest\rTiếp theo chúng ta tạo các trường hợp thử nghiệm Kịch bản thử nghiệm 1 - Mã thông báo JWT không hợp lệ. Đặt Tiêu đề ủy quyền là \u0026ldquo;Mã thông báo không hợp lệ\u0026rdquo;. Đảm bảo rằng định dạng Id email hợp lệ, định dạng Số liên lạc và độ tuổi có giá trị hợp lệ. Nếu không, quá trình kiểm tra sẽ thất bại do việc xác thực dữ liệu diễn ra trước khi xác minh mã thông báo. Prompt\rNegative scenaio: 1, Invalid jwtToken\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber\rand contactEmail attributes\rCreate the HTTP headers object and pass the jwtToken.\rCall /reserve end point using post method pass reservationDetails as request body\rAssert that the response message is \"Invalid Token\"\rĐối với tất cả các kịch bản thử nghiệm bên dưới, hãy sử dụng Token mà bạn đã tạo trước đó từ Cognito trong quá trình Đăng ký (Sign-in). Nếu chúng ta gặp lỗi hết hạn token, chúng ta chỉ cần đăng nhập và lấy lại token mới là được. Kịch bản thử nghiệm 2 - Số liên hệ không hợp lệ và JWT token hợp lệ, dùng prompt sau. Prompt\rNegative scenaio: Invalid Contact number\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, invalid contactNumber\rand contactEmail attributes\rcreate the HTTP headers object and pass the jwtToken\rcall /reserve end point using post method, pass reservationDetails as request body\rassert that the response message contains \"Contact Number should be valid phone number\"\rKịch bản thử nghiệm 3 - JWT token và tất cả các tham số đầu vào đều hợp lệ. Prompt\rPositive scenario 1:\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber\rand contactEmail attributes\rcreate the HTTP headers object and pass the jwtToken\rcall /reserve end point using post method, pass reservationDetails as request body\rassert that http status OK\rand assert that the response message contains \"reservation made successfully\"\rBây giờ chúng ta sẽ đăng nhập để lấy token và tiến hành run file này, nếu pass qua hết thì được. Tôi tiến hành chạy và đã pass được cả 3 test case Code hoan chỉnh cho lớp ReseveFlightApiTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.dto.ReservationDetails; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.client.TestRestTemplate; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import static org.assertj.core.api.Assertions.assertThat; /* Create a BookingAPIReserveTest class to test the bookingApi using web environment with random port. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class ReserveFlightApiTest { String myToken = \u0026#34;Put Your Token Here ahihi :3\u0026#34;; @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Autowired private TestRestTemplate restTemplate; /* Negative scenaio: 1, Invalid jwtToken create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber and contactEmail attributes Create the HTTP headers object and pass the jwtToken. Call /reserve end point using post method pass reservationDetails as request body Assert that the response message is \u0026#34;Invalid Token\u0026#34; */ @Test public void testReserveFlightWithInvalidToken() { // Create a ReservationDetails object with the necessary data ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;John\u0026#34;); reservationDetails.setLastName(\u0026#34;Doe\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;Economy\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;1234567890\u0026#34;); reservationDetails.setContactEmail(\u0026#34;john.doe@example.com\u0026#34;); // Create an HTTP entity with the reservation details and an invalid JWT token HttpHeaders headers = new HttpHeaders(); headers.setBearerAuth(\u0026#34;invalid_token\u0026#34;); HttpEntity\u0026lt;ReservationDetails\u0026gt; requestEntity = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); // Send a POST request to the booking API endpoint ResponseEntity\u0026lt;String\u0026gt; responseEntity = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, requestEntity, String.class); // Assert the response status code and message assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED); assertThat(responseEntity.getBody()).isEqualTo(\u0026#34;Invalid Token\u0026#34;); } /* Negative scenaio: Invalid Contact number create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, invalid contactNumber and contactEmail attributes create the HTTP headers object and pass the jwtToken call /reserve end point using post method, pass reservationDetails as request body assert that the response message contains \u0026#34;Contact number must be a 10-digit number\u0026#34; */ @Test public void testInvalidContactNumber() { ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;XXXX\u0026#34;); reservationDetails.setLastName(\u0026#34;XXX\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;First Class\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;1234\u0026#34;); reservationDetails.setContactEmail(\u0026#34;XX@gmail.com\u0026#34;); HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;,myToken); HttpEntity\u0026lt;ReservationDetails\u0026gt; request = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, request, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST); assertThat(response.getBody()).contains(\u0026#34;Contact number must be a 10-digit number\u0026#34;); } /* Positive scenario 1: create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber and contactEmail attributes create the HTTP headers object and pass the jwtToken call /reserve end point using post method, pass reservationDetails as request body assert that http status OK and assert that the response message contains \u0026#34;reservation made successfully\u0026#34; */ @Test public void testPositiveScenario() { ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;XXXX\u0026#34;); reservationDetails.setLastName(\u0026#34;XXX\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;First Class\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;0928895717\u0026#34;); reservationDetails.setContactEmail(\u0026#34;phamhuutuanaws@gmail.com\u0026#34;); HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;,myToken); HttpEntity\u0026lt;ReservationDetails\u0026gt; request = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, request, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/10-exception-handler-module1/",
	"title": "Xây dựng Exception Handler để xử lý các Authentication Exceptions",
	"tags": [],
	"description": "",
	"content": " Bây giờ chúng ta sẽ xây dựng trình xử lý ngoại lệ (Exception Handler) để xử lý các lỗi xác thực Cognito và xác định thông báo ứng dụng tùy chỉnh cho một số trường hợp ngoại lệ thường gặp. Mở AuthenticationException.java trong thư mục src/main/java/com.airlines.catalog/Exception và thêm các import sau: Sử dụng prompt bên dưới để tạo lớp AuthenticationException sẽ xử lý các ngoại lệ liên quan đến xác thực JWT token. Prompt\rCreate a public class AuthenticationException that extends Runtime Exception with member variable response entity and constructor with Exception as input parameter.\rCheck for different types of JWT exceptions\rStore the message in member variable response entity\rXác minh xem tất cả các loại ngoại lệ bắt buộc có có được xử lý hay không - malformed URL, JWT decode, invalid claims and expired token.\nCode hoàn chỉnh cho lớp AuthenticationException\npackage com.airlines.catalog.exception; import com.auth0.jwt.exceptions.InvalidClaimException; import com.auth0.jwt.exceptions.JWTDecodeException; import com.auth0.jwt.exceptions.TokenExpiredException; import java.net.MalformedURLException; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /*Create a public class AuthenticationException that extends Runtime Exception with member variable response entity and constructor with Exception as input parameter. Check for different types of JWT exceptions Store the message in member variable response entity. */ @Getter public class AuthenticationException extends RuntimeException { private ResponseEntity responseEntity; public AuthenticationException(Exception e) { if (e instanceof JWTDecodeException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Token\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof TokenExpiredException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Token Expired\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof InvalidClaimException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Claim\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof MalformedURLException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid URL\u0026#34;, HttpStatus.UNAUTHORIZED); } } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/11-flight-reservations-controller-classes-module1/",
	"title": "Tạo lớp FlightReservation Controller",
	"tags": [],
	"description": "",
	"content": " Chúng ta sẽ xây dựng lớp controller để hiển thị “getFlightDetails” API nhằm xây dựng API Controller Mở FlightReservation.java trong thư mục src/main/java/com.airlines.catalog/controller. Thêm import và mã khởi đầu bên dưới cho lớp. Code\rimport java.util.List;\nimport com.airlines.catalog.dto.FlightDetails;\nimport com.airlines.catalog.exception.AuthenticationException;\nimport com.airlines.catalog.repository.AirportRepository;\nimport com.airlines.catalog.repository.FlightRepository;\nimport com.airlines.catalog.service.FlightDetailsService;\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\npublic class FlightReservation {\n@Autowired\nFlightRepository flightresultsRepository;\n@Autowired\nAirportRepository airportresultsRepository;\n@Autowired\nFlightDetailsService FlightDetailsService;\n@Value(\"${cognito.userpool.id}\")\nprivate String cognitoUserPoolId;\n@Value(\"${aws.region}\")\nprivate String awsRegion;\n@Value(\"${sns.arn}\")\nprivate String snsTopicArn;\n}\r---\rTrong lớp FlightReservation, hãy sử dụng prompt sau để tạo phương thức verifyToken. Phương thức này sẽ sử dụng trình xử lý AuthenticationException mà chúng ta đã tạo trước đó. Prompt\rCreate a private method verifyToken to verify JWT token with input parameters asCognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. Get the public key from AwsCognitoKeyProvider. Catch all Exception throw new authenticationException\rSử dụng prompt bên dưới để tạo getFlightDetails controller sẽ hiển thị REST API để tìm chuyến bay. Prompt\rCreate a rest controller getFlightDetails to get flight details with HTTP GET Method, /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\rCode hoàn chỉnh hiện tại cho lớp FlightReservation (sau này chúng ta sẽ tiếp tục cập nhật lại lớp này trong Module 2 ) package com.airlines.catalog.controller; import java.util.List; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.exception.AuthenticationException; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightDetailsService; import com.auth0.jwt.JWT; import com.auth0.jwt.JWTVerifier; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.interfaces.DecodedJWT; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class FlightReservation { @Autowired FlightRepository flightresultsRepository; @Autowired AirportRepository airportresultsRepository; @Autowired FlightDetailsService FlightDetailsService; @Value(\u0026#34;${cognito.userpool.id}\u0026#34;) private String cognitoUserPoolId; @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${sns.arn}\u0026#34;) private String snsTopicArn; /* Create a private method verifyToken to verify JWT token with input parameters as Cognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. catch all Exception throw new authenticationException.*/ private Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException { try { String cognitoWellKnownUrl = \u0026#34;https://cognito-idp.\u0026#34; + awsRegion + \u0026#34;.amazonaws.com/\u0026#34; + cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;; Algorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl)); JWTVerifier verifier = JWT.require(algorithm).build(); DecodedJWT decodedJWT = verifier.verify(token); return true; } catch (Exception e) { throw new AuthenticationException(e); } } /* Create a rest controller getFlightDetails to get flight details with HTTP GET Method , /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header. Rest controller returns a ResponseEntity of string. */ @GetMapping(\u0026#34;/flight\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate, @RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode, @RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException { /* Call verifyToken method, catch authentication exception and return the responseEntity if token is valid and call the findFlights method in FlightDetailsService class with input parameters departure date, departure airport code, arrival airport code, flightResultsRepository and airportResultsRepository. If flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;. If authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden */ try { if (verifyToken(cognitoUserPoolId, awsRegion, authorization)) { List\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository); if (flights.size() \u0026gt; 0) { return new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK); } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK); } } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } } catch (AuthenticationException e) { return new ResponseEntity\u0026lt;\u0026gt;(e.getResponseEntity().getBody().toString(), HttpStatus.UNAUTHORIZED); } } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/2-module-1-find-flights-api/12-unit-test-find-flights-api/",
	"title": "Unit test API tìm chuyến bay",
	"tags": [],
	"description": "",
	"content": " Unit Test của phương thức getFlightDetailsApiTest trong Lớp Controller. API sẽ được kiểm tra tích hợp từ đầu đến cuối. Mở getFlightDetailsApiTest.java trong thư mục test/java/com.airlines.catalog.test/ và thêm các import sau Tạo lớp bookingApiTest với prompt Prompt\rCreate a bookingApiTest class to test the FlightReservation class /flight endpoint using web environment with random port.\rKịch bản thử nghiệm 1: JWT token không hợp lệ. Đặt Authorization Header là \u0026quot; Bearer invalidToken \u0026ldquo;. Dùng prompt sau. Prompt\rCreate a method for token invalid test case.\rCreate the HTTP headers object and pass the jwtToken\rurl is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX\rmake a get request\rAssert \"Invalid Token\" is returned in response\rĐối với tất cả các kịch bản thử nghiệm bên dưới, hãy sử dụng token mà bạn đã tạo trước đó từ Cognito trong quá trình Đăng ký. Nếu bạn gặp lỗi hết hạn token, hãy làm theo các bước \u0026ldquo;Đăng nhập\u0026rdquo; trong chương \u0026ldquo;Thiết lập Cognito\u0026rdquo; để nhận token mới. Kịch bản thử nghiệm 2: JWT token hợp lệ và các chuyến bay có sẵn cho dữ liệu thử nghiệm được cung cấp. Prompt\rCreate a method for token valid test case.\rcreate the HTTP headers object and pass the jwtToken. URL is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request\rAssert \"FlightDetails\" is contained in response\rKịch bản thử nghiệm 3: JWT token hợp lệ và các chuyến bay không có sẵn cho dữ liệu thử nghiệm được cung cấp. Dùng prompt Prompt\rCreate a method for no flights available.\rcreate the HTTP headers object and pass the jwtToken.\rurl is /flight end point with departureDate=2023-08-01, departureAirportCode=CDG, arrivalAirportCode=LHR,\rmake a get request\rAssert that response contains \"No flights found\"\rKịch bản thử nghiệm 4: JWT token hợp lệ và chỉ có một chuyến bay cho dữ liệu thử nghiệm được cung cấp. Prompt\rCreate a method for single flight available test case.\rCreate the HTTP headers object and pass the jwtToken.\rurl /flight end point with departureDate=2023-08-02, departureAirportCode=LHR, arrivalAirportCode=CDG,\rmake a get request\rAssert \"FlightDetails\" is contained only once in response\rTiếp theo, tôi sẽ lấy token còn hạn sử dụng bằng cách đăng nhập qua Cognito, sau đó tôi dùng token đó thay thế vào code, sau đó chuột phải vào getFlightDetailsApiTest.java, cuối cùng chọn Run getFlightDetailsApiTest và chờ kết quả Tôi đã lấy token và tiến hành test, và nó đã pass cả 4 test case Code hoàn chỉnh cho lớp GetFlightDetailsApiTest package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.client.TestRestTemplate; import static org.assertj.core.api.Assertions.assertThat; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; /* Create a bookingApiTest class to test the FlightReservation class /flight endpoint using web environment with random port. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class GetFlightDetailsApiTest { @Autowired private TestRestTemplate restTemplate; @Value(\u0026#34;${server.port}\u0026#34;) private int port; /* Create a method for token invalid test case. Create the HTTP headers object and pass the jwtToken url is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request Assert \u0026#34;Invalid Token\u0026#34; is returned in response */ @Test public void testTokenInvalid() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;Bearer invalidToken\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=MIA\u0026amp;arrivalAirportCode=LAX\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED); assertThat(response.getBody()).contains(\u0026#34;Invalid Token\u0026#34;); } /* Create a method for token valid test case. Create the HTTP headers object and pass the jwtToken. url is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request Assert \u0026#34;FlightDetails\u0026#34; is contained in response */ @Test public void testTokenValid() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=MIA\u0026amp;arrivalAirportCode=LAX\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;FlightDetails\u0026#34;); } /* Create a method for no flights available. Create the HTTP headers object and pass the jwtToken. url is /flight end point with departureDate=2023-08-01, departureAirportCode=CDG, arrivalAirportCode=LHR, make a get request Assert that response contains \u0026#34;No flights found\u0026#34; */ @Test public void testNoFlightsAvailable() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=CDG\u0026amp;arrivalAirportCode=LHR\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;No flights found\u0026#34;); } /* Create a method for single flight available test case. Create the HTTP headers object and pass the jwtToken. url /flight end point with departureDate=2023-08-02, departureAirportCode=LHR, arrivalAirportCode=CDG, make a get request Assert \u0026#34;FlightDetails\u0026#34; is contained only once in response */ @Test public void testSingleFlightAvailable() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-02\u0026amp;departureAirportCode=LHR\u0026amp;arrivalAirportCode=CDG\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;FlightDetails\u0026#34;); } } "
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://phamhuutuan21110713.github.io/PhamHuuTuan_Workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]