[
{
	"uri": "//localhost:1313/1-config-environment/1-connecting-ec2/",
	"title": "Connect to Development EC2",
	"tags": [],
	"description": "",
	"content": " Create stack and load into .yaml file to get preconfigured resources\nRetrieve Credentials for your AWS provided development EC2 instance\nOnce you have accessed the AWS console, enter Secrets in the search box at the top of the page. Under Services, an entry for Secrets Manager will be visible. Click it to open the AWS Secrets Manager service page. We will see EC2InstanceSecret, it appears because we loaded it from .yaml file, now we click on it. After clicking, scroll down to the Secret value section and then click on Retreive secret value. Then we can see the secret values ​​like User name and Password, copy it to prepare for the next step. Set up Inbound rule for EC2 Security group for RDP from our device.\nOpen AWS console, search for EC2 in the search bar and select it. In EC2 Dashboard, select Instances (Running). Click on the ID of this running instance. Scroll down, and select the Security tab, then Click on the link of Security group\n-After entering Security group, scroll down and select Inbound rules, then select Edit inbound rules.\n![image.png](/images/setup_environment/setup_ec2/image_9.png)\rWe will Add rule for Inbound rule, specifically we will add 1 rule for protocol RDP and the source will come from the IP address of our device, then click Save rules.\nLog in to our EC2 instance.\nGo back to our EC2 instance, tick it and click Connect Select the RDP client tab, and then click Download remote desktop file. Go to where you just downloaded the file, select it, and proceed to Connect with the user name and password you just copied. We may see a warning like the one below, if so, click Yes. After successfully logging in, we will use this computer to continue, this is the practice interface of the machine after we successfully log in. "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/1-table-database-module2/",
	"title": "Create Tables and load data",
	"tags": [],
	"description": "",
	"content": " Create the tables required for the reservation API. This API needs two tables: Passenger table to hold passenger\u0026rsquo;s personal information. Reservation table to hold the flight reservation details. No test data setup is required for these tables. Navigate to src/main/java/com.airlines.catalog folder and open the DBSetupModule2.sql file. Use the below prompt to build the SQL script for passenger table Prompt\rCreate passenger table with columns passenger_Id Auto increment, adult, gender, first_Name, last_Name\rAll columns are not nullable\rAfter having the SQL command, we put it through MySQL workbench to run and create the table. Use the below prompt to build the SQL script for reservation table: Prompt\rCreate reservation table with columns booking_Reference as BIGINT Auto increment, passenger_Id, flight_Id, reservation_Date, reservation_Time, reservation_Status, travel_Class, ticket_Price as decimal, currency_Code, payment_Status, payment_Mode, contact_Number, contact_Email passenger_Id references passenger table flight_Id references flight.id\rNow we have the 2 tables needed for module 2. Complete code for SQL scripts // Create passenger table with columns passenger_Id as int Auto increment, adult, gender, first_Name, last_Name // All columns are not nullable CREATE TABLE passenger ( passenger_id INT NOT NULL AUTO_INCREMENT, adult BOOLEAN NOT NULL, gender VARCHAR(10) NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, PRIMARY KEY (passenger_id) ); // Create reservation table with columns booking_Reference as BIGINT Auto increment, passenger_Id, flight_Id, // reservation_Date, reservation_Time, reservation_Status, travel_Class, ticket_Price as decimal, // currency_Code, payment_Status, // payment_Mode, contact_Number, contact_Email // passenger_Id references passenger table // flight_Id references flight.id CREATE TABLE reservation ( booking_reference BIGINT NOT NULL AUTO_INCREMENT, passenger_id INT NOT NULL, flight_id INT NOT NULL, reservation_date DATE NOT NULL, reservation_time TIME NOT NULL, reservation_status VARCHAR(20) NOT NULL, travel_class VARCHAR(20) NOT NULL, ticket_price DECIMAL(10,2) NOT NULL, currency_code VARCHAR(3) NOT NULL, payment_status VARCHAR(20) NOT NULL, payment_mode VARCHAR(20) NOT NULL, contact_number VARCHAR(20) NOT NULL, contact_email VARCHAR(50) NOT NULL, PRIMARY KEY (booking_reference), FOREIGN KEY (passenger_id) REFERENCES passenger(passenger_id), FOREIGN KEY (flight_id) REFERENCES flight(id) ); "
},
{
	"uri": "//localhost:1313/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Amazon Q Developer Workshop - Build enterprise Java application with Spring Boot Overview This workshop aims to help us learn how to build an enterprise Java application in a microservices architecture using Spring Boot, with the help of Amazon Q Developer, an AI coding companion from Amazon. We will develop a modest microservices application to understand how to use Amazon Q Developer in real-world projects. We will not only create code but also integrate with various AWS services and test the application. Technology used The application we are building is a flight booking application, and the application will use Microservices architecture, we will write code and use Intelij IDEA IDE. Also need knowledge of Java, Spring Boot, SQL and Junit. We will learn how to perform following development tasks using Amazon Q Developer: Create Database Schema Load Data into Tables Implement the Business Logic for API Integrate AWS Services Create Unit Test Scripts for the Classes Modules Our application consists of 2 Modules, including: Find flights This API will get a list of flights based on query parameters departure date, departure city and arrival city. In this module you will use Amazon Q Developer to implement integration with Amazon Cognito, AWS Secrets Manager and Amazon RDS using Spring Data JPA. Book flight This API will reserve the flight and send a confirmation email to the passenger with booking details. In this module you will use Amazon Q Developer to implement input data validation, data mapping, custom exception handling, transaction management and notification using Amazon SNS. Module 2 leverages some of the code built in Module 1. So it is recommended to complete Module 1 before proceeding to Module 2. Architecture Content Setup Development Environment Module 1 - Find Flights API Module 2 - Flight Reservation API Test API with Postman Clean up "
},
{
	"uri": "//localhost:1313/1-config-environment/",
	"title": "Setup Development Environment",
	"tags": [],
	"description": "",
	"content": "To start the workshop, follow one of the links, depending on whether you are:\nConnect to Development EC2 Set up Cognito Configure SNS Topic to send Emails Configure MySQL Workbench to connect to RDS Open the prompt project in IntelliJ IDE Setup Amazon Q Developer "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/1-table-database-module1/",
	"title": "Setup the database tables for Module 1",
	"tags": [],
	"description": "",
	"content": " We will create 2 tables, Airport and Flight in FlightReservationDB Database. We will also create SQL scripts to load test data into the 2 tables. In the Airline-Booking-PromptProject project folder, expand the “src” directory from the left sidebar, navigate to the src/main/java/com.airlines.catalog folder and open DBSetupModule1.sql Next we need to open MySQL workbench and switch to the database named FlightReservationDB , this database has been created in the workshop. Next we use the following command in the IDE to create the airport table. Then use this Prompt for Amazon Q chat to create the flight. table. From the above steps, we will have the complete as shown below, put them into MySQL Workbench to generate tables airport and flight Next we will insert test data into the airport table, we will write the script in the IDE, then copy it to workbench to run it. Next we will ask Amazon Q chat to insert test data into the flight table with the following prompt. Prompt\rCreate 5 records in flight table satisfying the following data conditions,\n2 flights between MIA and LAX on a departure date 2023-08-01,\n2 flight between LHR and CDG on a departure date 2023-08-01,\n1 flight between LHR and CDG, departure date 2023-08-02,\n1 flight between MIA and LAX with available seats as 0 on a departure date 2023-08-02 We will copy all the scripts into MySQL workbench and run them to insert the data into the table.\nComplete code to load test data into the tables\nuse FlightReservationDB; CREATE TABLE airport ( airport_code VARCHAR(10) PRIMARY KEY, airport_name VARCHAR(100), airport_city VARCHAR(100), airport_locale VARCHAR(100) ); CREATE TABLE flight ( id INT PRIMARY KEY, departure_date DATE, departure_time TIME, departure_airport_code VARCHAR(10), arrival_date DATE, arrival_time TIME, arrival_airport_code VARCHAR(10), flight_number VARCHAR(20), flight_duration INT, ticket_price DECIMAL(10, 2), ticket_currency VARCHAR(3), seat_capacity INT, seat_available INT, FOREIGN KEY (departure_airport_code) REFERENCES airport(airport_code), FOREIGN KEY (arrival_airport_code) REFERENCES airport(airport_code) ); Complete SQL code for test data loading INSERT INTO airport (airport_code, airport_name, airport_city, airport_locale) VALUES (\u0026#39;LHR\u0026#39;, \u0026#39;London Heathrow Airport\u0026#39;, \u0026#39;London\u0026#39;, \u0026#39;United Kingdom\u0026#39;), (\u0026#39;MIA\u0026#39;, \u0026#39;Miami International Airport\u0026#39;, \u0026#39;Miami\u0026#39;, \u0026#39;United States\u0026#39;), (\u0026#39;CDG\u0026#39;, \u0026#39;Charles de Gaulle Airport\u0026#39;, \u0026#39;Paris\u0026#39;, \u0026#39;France\u0026#39;), (\u0026#39;LAX\u0026#39;, \u0026#39;Los Angeles International Airport\u0026#39;, \u0026#39;Los Angeles\u0026#39;, \u0026#39;United States\u0026#39;); INSERT INTO flight (id, departure_date, departure_time, departure_airport_code, arrival_date, arrival_time, arrival_airport_code, flight_number, flight_duration, ticket_price, ticket_currency, seat_capacity, seat_available) VALUES (1, \u0026#39;2023-08-01\u0026#39;, \u0026#39;09:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;11:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA101\u0026#39;, 330, 199.99, \u0026#39;USD\u0026#39;, 200, 180), (2, \u0026#39;2023-08-01\u0026#39;, \u0026#39;15:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;17:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA102\u0026#39;, 330, 249.99, \u0026#39;USD\u0026#39;, 180, 150), (3, \u0026#39;2023-08-01\u0026#39;, \u0026#39;08:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;10:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA201\u0026#39;, 150, 129.99, \u0026#39;EUR\u0026#39;, 220, 200), (4, \u0026#39;2023-08-01\u0026#39;, \u0026#39;16:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-01\u0026#39;, \u0026#39;18:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA202\u0026#39;, 150, 149.99, \u0026#39;EUR\u0026#39;, 180, 160), (5, \u0026#39;2023-08-02\u0026#39;, \u0026#39;10:00:00\u0026#39;, \u0026#39;LHR\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;12:30:00\u0026#39;, \u0026#39;CDG\u0026#39;, \u0026#39;BA203\u0026#39;, 150, 169.99, \u0026#39;EUR\u0026#39;, 220, 220), (6, \u0026#39;2023-08-02\u0026#39;, \u0026#39;12:00:00\u0026#39;, \u0026#39;MIA\u0026#39;, \u0026#39;2023-08-02\u0026#39;, \u0026#39;14:30:00\u0026#39;, \u0026#39;LAX\u0026#39;, \u0026#39;AA103\u0026#39;, 330, 299.99, \u0026#39;USD\u0026#39;, 180, 0); "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/2-model-classes-module1/",
	"title": "Build the model classes",
	"tags": [],
	"description": "",
	"content": " We will build model classes to work with the airport table and the flight table. In the project we will see 4 files located in the directory src/main/java/com.airlines.catalog/model. For this module, we will work with Airport.java and Flight.java. We will build model classes in these two files. Open Airport.java. You want to know which libraries to import to automatically generate getters, setters and constructors. You also need to import the library as a JPA Entiry. Use the following prompt to get suggestions from the Amazon Q Chat Panel. Prompt1\r*Give me the import statements that i need to include in my model class to generate Getter, Setter and constructor* Prompt2\r*Give me the import statements that i need to include in my model class to make it a JPA Entity* We will copy and paste these libraries into the Airport.java. file. Next, we use the prompt below to complete the Airport.java class. Prompt\r*Create an Entity class Airport mapped to table airport with following 4 attributes; airportCode as id, airportName, airportCity and airportLocale.*\n*Each attribute should be mapped to table columns and column names will be same as attribute names with _ separator between parts of the name. Use Lombok for getters and setters* Open DBSetupModule1.sql and select the SQL command \u0026quot; CREATE TABLE flight\u0026quot;, right click and select Send to Amazon Q and then Send to Prompt from the sub menu. The SQL command is copied to the Amazon Q Chat Panel and you can use the prompt below at the beginning of the SQL command to get the code for the Flight class. Prompt\r*Create flight JPA Entity class for the below table defintiion. Do not create any relationship between airport and flight entity. Use String for date and time columns* After creating, copy the code and put it in the file Flight.java Create a toString method for this class using the prompt below, then copy the code into the Flight.java file Prompt\r*Create a tostring method to convert attributes to string* Similarly, create a toJson method for this class using the prompt below, then, take the code and put it in the Flight.java file. Prompt\rCreate a **toJson** method to convert the attributes to Json String Complete code for Airport class package com.airlines.catalog.model; package com.airlines.catalog.model; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Column; import lombok.Data; @Entity @Table(name = \u0026#34;airport\u0026#34;) @Data public class Airport { @Id @Column(name = \u0026#34;airport_code\u0026#34;) private String airportCode; @Column(name = \u0026#34;airport_name\u0026#34;) private String airportName; @Column(name = \u0026#34;airport_city\u0026#34;) private String airportCity; @Column(name = \u0026#34;airport_locale\u0026#34;) private String airportLocale; // Default constructor (required by JPA) public Airport() { } } Complete code for Flight class package com.airlines.catalog.model; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table; import javax.persistence.Column; import lombok.Getter; import lombok.Setter; @Entity @Table(name = \u0026#34;flight\u0026#34;) @Getter @Setter public class Flight { @Id @Column(name = \u0026#34;id\u0026#34;) private int id; @Column(name = \u0026#34;departure_date\u0026#34;) private String departureDate; @Column(name = \u0026#34;departure_time\u0026#34;) private String departureTime; @Column(name = \u0026#34;departure_airport_code\u0026#34;) private String departureAirportCode; @Column(name = \u0026#34;arrival_date\u0026#34;) private String arrivalDate; @Column(name = \u0026#34;arrival_time\u0026#34;) private String arrivalTime; @Column(name = \u0026#34;arrival_airport_code\u0026#34;) private String arrivalAirportCode; @Column(name = \u0026#34;flight_number\u0026#34;) private String flightNumber; @Column(name = \u0026#34;flight_duration\u0026#34;) private int flightDuration; @Column(name = \u0026#34;ticket_price\u0026#34;) private double ticketPrice; @Column(name = \u0026#34;ticket_currency\u0026#34;) private String ticketCurrency; @Column(name = \u0026#34;seat_capacity\u0026#34;) private int seatCapacity; @Column(name = \u0026#34;seat_available\u0026#34;) private int seatAvailable; // Default constructor public Flight() { } //Create a tostring method to convert attributes to string @Override public String toString() { return \u0026#34;Flight{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightDuration=\u0026#34; + flightDuration + \u0026#34;, ticketPrice=\u0026#34; + ticketPrice + \u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, seatCapacity=\u0026#34; + seatCapacity + \u0026#34;, seatAvailable=\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } //Create a toJson method to convert the attributes to Json String public String toJson() { return \u0026#34;{\u0026#34; + \u0026#34;\\\u0026#34;id\\\u0026#34;:\\\u0026#34;\u0026#34; + id + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\u0026#34; + flightDuration + \u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\u0026#34; + ticketPrice + \u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;seatCapacity\\\u0026#34;:\u0026#34; + seatCapacity + \u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/2-model-classes-module2/",
	"title": "Build the model layer",
	"tags": [],
	"description": "",
	"content": " Next you will create model classes to enable the application to interact with passenger and reservation tables in the database. In your projects structure you can see 2 java files created for passenger.java and reservation.java. You will develop these classes to build the model functionality. Navigate to src/main/java/com.airlines.catalog/model folder, open Passenger.java file and add the following imports: Use the prompt below to create the Passenger Entity class Prompt\rCreate Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName,\rlastName mapped to passenger table, column names sepetated by _\rNow that the Passenger entity class is complete, let\u0026rsquo;s move on to the reservation entity class, navigate to the src/main/java/com.airlines.catalog/model folder, open Deposit.java and add the following imports: Use the below prompt to create the Reservation Entity class Prompt\r/* Build a Reservation Entity class mapped to database table reservation Attributes for the class:\rbookingReference as long identity autogenerated,\rpassengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass,\rticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber,\rcontactEmail mapped to column names seperated by _\rComplete code for Passenger class package com.airlines.catalog.model; import lombok.Getter; import lombok.Setter; import javax.persistence.Entity; import javax.persistence.Table; import javax.persistence.Id; import javax.persistence.Column; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; /* Build a Passenger Entity class with columns passengerId as Identity auto generated, adult, gender, firstName, lastName mapped to passenger table, column names sepetated by _*/ @Getter @Setter @Entity @Table(name = \u0026#34;passenger\u0026#34;) public class Passenger { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026#34;passenger_id\u0026#34;) private int passengerId; @Column(name = \u0026#34;adult\u0026#34;) private boolean adult; @Column(name = \u0026#34;gender\u0026#34;) private String gender; @Column(name = \u0026#34;first_name\u0026#34;) private String firstName; @Column(name = \u0026#34;last_name\u0026#34;) private String lastName; } Complete code for Reservation class package com.airlines.catalog.model; import lombok.Getter; import lombok.Setter; import javax.persistence.Entity; import javax.persistence.Table; import javax.persistence.Id; import javax.persistence.Column; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; /* Build a Reservation Entity class mapped to database table reservation Attributes for the class: bookingReference as long identity autogenerated, passengerId, flightId, reservationDate, reservationTime,reservationStatus, travelClass, ticketPrice as double, currencyCode, paymentStatus, paymentMode, contactNumber, contactEmail mapped to column names seperated by _ */ @Getter @Setter @Entity @Table(name = \u0026#34;reservation\u0026#34;) public class Reservation { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026#34;booking_reference\u0026#34;) private long bookingReference; @Column(name = \u0026#34;passenger_id\u0026#34;) private int passengerId; @Column(name = \u0026#34;flight_id\u0026#34;) private int flightId; @Column(name = \u0026#34;reservation_date\u0026#34;) private String reservationDate; @Column(name = \u0026#34;reservation_time\u0026#34;) private String reservationTime; @Column(name = \u0026#34;reservation_status\u0026#34;) private String reservationStatus; @Column(name = \u0026#34;travel_class\u0026#34;) private String travelClass; @Column(name = \u0026#34;ticket_price\u0026#34;) private double ticketPrice; @Column(name = \u0026#34;currency_code\u0026#34;) private String currencyCode; @Column(name = \u0026#34;payment_status\u0026#34;) private String paymentStatus; @Column(name = \u0026#34;payment_mode\u0026#34;) private String paymentMode; @Column(name = \u0026#34;contact_number\u0026#34;) private String contactNumber; @Column(name = \u0026#34;contact_email\u0026#34;) private String contactEmail; } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/",
	"title": "Module 1 - Find Flights API",
	"tags": [],
	"description": "",
	"content": "Find Flights API Overview In this module you will build an API to find flights based on departure date, departure airport code and arrival airport code. This API returns a list of flights with details about the flights, seats and price information. API calls are secured with a JWT token. User logs into Cognito Hosted UI to get the JWT Token and passes the token in the Authorization HTTP header. API verifies the JWT token and then allows the requested action to be performed. API interacts with flight and airport tables in RDS MySQL database to get the results. RDS credentials are stored securely in AWS Secret Manager. API returns the following fields: Flight Id, Departure, Departure, Departure AirportCode, Departure Airport Name, departure Airport City, Departure Airport Locale Arrival Airport Code, Arrival Airport Name, Arrival Airport City, Arrival Airport Locale, Arrival Date, Arrival Time, Ticket Price Ticket Currency, Flight Number, Flight Duration; Seat Available Database for this module has 2 tables: Airport table - stores the details of the Airport with Airport Code as primary key and associated airport details. Flight table - stores the inventory of flights with their schedule, capacity and seat availability. Class Design for Module 1 Content Setup the database tables for Module 1 Build the model classes Create Data Transfer Object (DTO) Build JPA Repository Interface Data Source configuration Build the service class Unit Testing of the repository classes Unit Test the service class Get Cognito public keys Build Exception Handler to handle Authentication Exceptions Create the FlightReservation Controller class Unit Test Find Flights API "
},
{
	"uri": "//localhost:1313/1-config-environment/2-config-cognito/",
	"title": "Set up Cognito",
	"tags": [],
	"description": "",
	"content": " Learn about Amazon Cognito\nAn Amazon Cognito user pool provides an user directory that you will use to authenticate \u0026amp; authorize the access to Flight reservation application APIs. You will the use the Amazon Cognito hosted UI to sign up and create a new user. It will return a session token (JWT Token) which you will use in your HTTP request Authorization headers when you make a API call. Later on in the workshop in module 1, we will write code to verify the token passed in API request with cognito. Follow the Instructions to sign up and a create a new user. Sign up action automatically signs you in and gives you a token. These tokens are configured to be valid for 1 hour. If you get a token expired error in the API testing, follow instructions below to sign in and get a new token. Sign up to create a new user account\nType Cognito in the search box and then select it. In the User pools section, we will see a pre-set User pool, its suffix will be -UserPool, select it. After clicking, select the App integration tab. Next scroll down to App clients and analytics and click on the App client that you have already set up. In the App client screen, scroll down to Hosted UI, then click View Hosted UI. After clicking, we will be taken to the login interface, click Sign up to register an account, and we proceed to register. Then we receive the code to verify the account in the email we registered, after verifying we will receive it. We don\u0026rsquo;t need to care, what we care about is the url on the search bar, now on our bar there will be a token, we copy the URL, find the value of the access token and copy it. Note that this token only exists for 1 hour, after 1 hour we continue to log in again and get the token. "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/3-jpa-repository-module2/",
	"title": "Build the JPA Repository",
	"tags": [],
	"description": "",
	"content": " You will create JPA Repository Interfaces to acess the data from MYSQL Tables. Specify the query patterns to save the data to passenger and reservation table Open the PassengerRepository.java under the src/main/java/com.airlines.catalog/repository folder, then add the following imports in the document. Use the following prompt to create the PassengerRepository class. Prompt\rcreate jpa repository interface PassengerRepository.\rAdd a method to save passenger\rOpen the ReservationRepository.java under the src/main/java/com.airlines.catalog/repository folder, then Add the following imports in the document. Use the following prompt to create the ReservationRepository class. Prompt\rCreate interface ReservationRepository that extends JpaRepository.\rAdd a method to save reservation.\rComplete code for PassengerRepository class package com.airlines.catalog.repository; import com.airlines.catalog.model.Passenger; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; /* create jpa repository interface PassengerRepository. Add a method to save Passenger. */ @Repository public interface PassengerRepository extends JpaRepository\u0026lt;Passenger, Integer\u0026gt; { Passenger save(Passenger passenger); } Complete code for ReservationRepository class package com.airlines.catalog.repository; import com.airlines.catalog.model.Reservation; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; // Create interface ReservationRepository that extends JpaRepository. // Add a method to save reservation. @Repository public interface ReservationRepository extends JpaRepository\u0026lt;Reservation, Long\u0026gt; { Reservation save(Reservation reservation); } "
},
{
	"uri": "//localhost:1313/1-config-environment/3-configsns-to-send-email/",
	"title": "Configure SNS Topic to send Emails",
	"tags": [],
	"description": "",
	"content": " Introduce\nThe application will send a message to SNS Topic - \u0026ldquo;reservation-success\u0026rdquo; which means booking is successful, once the flight ticket is booked. Now we will configure the topic to send an email whenever a message is sent to this topic. Configure SNS Topic\nIn the search box, type SNS, then click Simple Notification Noitices. Select Topics in the left Menu bar, then we will see a topic called reservation-success, select it. After selecting a topic, scroll down to the Subcriptions section, then click Create subscription. Then we select Protocol as Email, then we enter the email we want to receive notifications. Finally click Create subscription. "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/3-dto-module1/",
	"title": "Create Data Transfer Object (DTO)",
	"tags": [],
	"description": "",
	"content": " Flight entity you created as part of \u0026ldquo;Build the model classes\u0026rdquo; chapter contains the airport code but API response needs additional information about the airport such as name, city and locale. You will create a FlightDetails class that will combine the information from flight and airport tables. Open FlightDetails.java under the src/main/java/com.airlines.catalog/dto folder. From the Amazon Q Chat Panel in your IDE, use the below prompt to create the complete FlightDetails class. Click on Copy button below the code panel and paste the code into the FlightDetails.java file. Prompt\r*Create class FlightDetails with following attributes:*\n*flightId as int, departureDate, departureTime, departureAirportCode as string, departureAirportName as string,*\n*departureAirportCity, departureAirportLocale,*\n*arrivalAirportCode, arrivalAirportName, arrivalAirportCity, arrivalAirportLocale,*\n*arrivalDate, arrivalTime, ticketPrice as double,*\n*ticketCurrency, flightNumber, flightDuration, seatAvailable as int*\nCreate a toString method for this class using the prompt below, then copy the code and put it into the FlightDetails.java file Prompt\r*Create a tostring method to convert attributes to string* Similarly create a method toJon with the prompt below. Prompt\r*Create a toJson method to convert the attributes to Json string* Complete code for FlightDetails class package com.airlines.catalog.dto; import lombok.Getter; import lombok.Setter; @Getter @Setter public class FlightDetails { private int flightId; private String departureDate; private String departureTime; private String departureAirportCode; private String departureAirportName; private String departureAirportCity; private String departureAirportLocale; private String arrivalAirportCode; private String arrivalAirportName; private String arrivalAirportCity; private String arrivalAirportLocale; private String arrivalDate; private String arrivalTime; private double ticketPrice; private String ticketCurrency; private String flightNumber; private int flightDuration; private int seatAvailable; //Create a toString method to convert the attributes to string @Override public String toString() { return \u0026#34;FlightDetails{\u0026#34; + \u0026#34;flightId=\u0026#34; + flightId + \u0026#34;, departureDate=\u0026#39;\u0026#34; + departureDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureTime=\u0026#39;\u0026#34; + departureTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCode=\u0026#39;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportName=\u0026#39;\u0026#34; + departureAirportName + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportCity=\u0026#39;\u0026#34; + departureAirportCity + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, departureAirportLocale=\u0026#39;\u0026#34; + departureAirportLocale + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCode=\u0026#39;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportName=\u0026#39;\u0026#34; + arrivalAirportName + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportCity=\u0026#39;\u0026#34; + arrivalAirportCity + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalAirportLocale=\u0026#39;\u0026#34; + arrivalAirportLocale + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalDate=\u0026#39;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, arrivalTime=\u0026#39;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, ticketPrice=\u0026#34; + ticketPrice + \u0026#34;, ticketCurrency=\u0026#39;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightNumber=\u0026#39;\u0026#34; + flightNumber + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, flightDuration=\u0026#34; + flightDuration + \u0026#34;, seatAvailable=\u0026#34; + seatAvailable + \u0026#39;}\u0026#39;; } //Create a toJson method to convert the attributes to Json string public String toJson() { return \u0026#34;{\u0026#34; + \u0026#34;\\\u0026#34;flightId\\\u0026#34;:\\\u0026#34;\u0026#34; + flightId + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureDate\\\u0026#34;:\\\u0026#34;\u0026#34; + departureDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureTime\\\u0026#34;:\\\u0026#34;\u0026#34; + departureTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportName\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportName + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportCity\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportCity + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;departureAirportLocale\\\u0026#34;:\\\u0026#34;\u0026#34; + departureAirportLocale + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCode\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCode + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportName\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportName + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportCity\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportCity + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalAirportLocale\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalAirportLocale + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalDate\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalDate + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;arrivalTime\\\u0026#34;:\\\u0026#34;\u0026#34; + arrivalTime + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;ticketPrice\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketPrice + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;ticketCurrency\\\u0026#34;:\\\u0026#34;\u0026#34; + ticketCurrency + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightNumber\\\u0026#34;:\\\u0026#34;\u0026#34; + flightNumber + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;flightDuration\\\u0026#34;:\\\u0026#34;\u0026#34; + flightDuration + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#34;, \\\u0026#34;seatAvailable\\\u0026#34;:\\\u0026#34;\u0026#34; + seatAvailable + \u0026#39;\\\u0026#34;\u0026#39; + \u0026#39;}\u0026#39;; } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/",
	"title": "Module 2 - Flight Reservation API",
	"tags": [],
	"description": "",
	"content": "Reserve Flight API overview In this Module you will build a Reserve Flight API that will provide the functionality to book a flight. API will take passenger details, reservation details and details of the flight to book as input. Flight Id returned from the findFlights API call will provided as input to this API. API calls are secured with a JWT token. User will log into Cognito Hosted UI to get the JWT Token and pass the token in the Authorization HTTP header. API verifies the token before saving data to passenger and reservation tables in the database. API will perform following functions: Validation of reservation details provided in the request such as Not Null validation, Email format validation and Phone Number format validation. Store the data after validation into passenger and reservation tables. Send out a booking confirmation notification with the reservation details and booking reference number to SNS Topic. This entire step needs to happen in an atomic transaction. User gets the booking reference number via email and also in the API response. Class design for module 2 Content Create Tables and load data Build the model layer Build the JPA Repository Unit test the Repository classes Handle Business Exceptions Build the service class Unit Test FlightBooking service class Create DTO Reservation Details Create the book flight API Controller Unit Testing of the reserve Flight API "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/4-jpa-repository-interface-module1/",
	"title": "Build JPA Repository Interface",
	"tags": [],
	"description": "",
	"content": " Build JPA Repository Interfaces to acess the data from MYSQL Tables. Specify the query patterns required to get data from airport and flight table. Open the AirportRepository.java class under the src/main/java/com.airlines.catalog/repository folder and add the following imports. Use the following prompt to create the AirportRepository class. Prompt\r*Add a method to find airport by airport code*\rOpen the FlightRepository.java class under the src/main/java/com.airlines.catalog/repository folder and add the following imports. Use the following prompt to create the FlightRepository class. Prompt\r*Create JPA repository interface FlightRepository.*\n*Add a method to find flights by departure date, departure airport code, arrival airport code that returns a iterable flight*\n*Add a method to get flight with Id as parameter and return the flight object*\rComplete code for AirportRepository class package com.airlines.catalog.repository; import com.airlines.catalog.model.Airport; import org.springframework.stereotype.Repository; import org.springframework.data.jpa.repository.JpaRepository; /* Create JPA repository interface named AirportRepository Add a method to find airport by airport code */ @Repository public interface AirportRepository extends JpaRepository\u0026lt;Airport, String\u0026gt; { Airport findByAirportCode(String airportCode); } Complete code for FlightRepository class package com.airlines.catalog.repository; import com.airlines.catalog.model.Flight; import org.springframework.stereotype.Repository; import org.springframework.data.jpa.repository.JpaRepository; /*Create JPA repository interface FlightRepository. Add a method to find flights by departure date, departure airport code, arrival airport code that returns a iterable flight Add a method to get flight with Id as parameter and return the flight object */ @Repository public interface FlightRepository extends JpaRepository\u0026lt;Flight, Integer\u0026gt; { Iterable\u0026lt;Flight\u0026gt; findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(String departureDate, String departureAirportCode, String arrivalAirportCode); Flight findById(int id); } "
},
{
	"uri": "//localhost:1313/1-config-environment/4-config-mysql-to-connect-rds/",
	"title": "Configure MySQL Workbench to connect to RDS",
	"tags": [],
	"description": "",
	"content": " We need to get the details of the RDS instance so we can setup it with MySQL Workbench.\nRetrieve the details for your AWS provided development RDS MySQL instance\nIn the AWS console, go to the search bar with Secrets, then we click on Secrets Manager. Then we click on the Secret named RDSSecretForApp. Scroll down to the Secret value section, then click the Retrieve secret value button. We have the RDS details here, copy them for later use. Setup MySQL Workbench Database Connection\nFind MySQL in the PC we connect to the instance. Once in, select Database, then select Manage Connections. Then click on the New button at the bottom, then enter a name for the Connection, and then get the information from the RDS instance to write to, then click on Store in Vault… After clicking, we get the password from the RDS details to enter, then click OK Once done, we click Test Connection to check if the connection is successful or not. If it shows a table like this, we have successfully set up. "
},
{
	"uri": "//localhost:1313/4-testing-api-with-postman/",
	"title": "Test API with Postman",
	"tags": [],
	"description": "",
	"content": " Through the above sections, we have successfully created APIs (find flights and book flights) and tested their working through test cases, and it seems that they all work fine. But for real, we need to have real requests to our API to be able to verify the working of the API. In this section, we will test both APIs with Postman to see if our APIs work or not. If successful, we can receive corresponding responses for each module. 1. With Flight Reservation API (Module 2) Now we will use our API to book a test flight, when we book we will get an email notification of successful booking, and the data will also be added to the database. First we need to run our project, we open the FlightBookingApplication file and run it. Next we go to Postman, we will connect to http://localhost:8090/reserve. We use the Post method. Next, we go to Authorization. Type select No auth. Then we go to Body, select raw, then paste in the Json data as follows. { \u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Davis\u0026#34;, \u0026#34;gender\u0026#34;:\u0026#34;Male\u0026#34;, \u0026#34;age\u0026#34;: 10, \u0026#34;flightId\u0026#34;: 1, \u0026#34;travelClass\u0026#34;:\u0026#34;Economy\u0026#34;, \u0026#34;ticketPrice\u0026#34;:\u0026#34;100\u0026#34;, \u0026#34;currencyCode\u0026#34;:\u0026#34;USD\u0026#34;, \u0026#34;paymentMode\u0026#34;:\u0026#34;CC\u0026#34;, \u0026#34;contactNumber\u0026#34;: \u0026#34;0928895717\u0026#34;, \u0026#34;contactEmail\u0026#34; : \u0026#34;phamhuutuanaws@gmail.com\u0026#34; } Next, go to the Headers tab, add a key which is Authorization, and the value will be the access_token that we have when logging in via Cognito. Finally click the Send button We will see the result, the response will have the following content. First we will receive a success notification email. And the data will also be added to 2 tables (passenger and reservation) corresponding to the content of our Json command. reservation table\npassenger table\n=\u0026gt;Meets requirements for module 2 2. With Find Flights API (Module 1) With the same operations, we also go to Postman, we change the method to GET, then change the URL as below, we can change the search content. And here is the result returned =\u0026gt; Meets requirements for module 1 So both of our APIs work fine and return the corresponding response.\n"
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/4-unit-test-repository-classes-module2/",
	"title": "Unit test the Repository classes",
	"tags": [],
	"description": "",
	"content": " Next you will build Junit unit tests for the repository classes - PassengerRepository and ReservationRepositoryTest. Open PassengerRepositoryTest.java in the folder test/java/com.airlines.catalog.test/ and add the following import statements. Create Unit test cases for PassengerRepository class using the Amazon Q Developer prompt below. Prompt\rCreate Junit test cases for PassengerRepository using\rweb environment with random port.\rCreate test case for save method by creating test data for firstName, lastName, adult and gender.\rAssert that the passenger Id is not null\rClick on the arrow to the left of PassengerRepositoryTest class declaration and choose Run PassengerRepositoryTest. It will run all the test cases in the class. If any test fails, check the spring boot errors in the IDE. If the exception is because of HibernateJpaConfiguration configuration errors check the application.properties file to ensure right values are populated for aws.region and secretmanager.key. Also ensure the test data satisfies the database constraints in the passenger table. I passed the test case, and there is test data in the database. Next we will test the remaining class. Open ReservationRepositoryTest.java in the folder test/java/com.airlines.catalog.test/ and add the following import statements. Create a ReservedRepository class using the following Amazon Q Developer prompt, we will remove all code related to the Amazon Q generated method. Prompt\rCreate ReservationRepositoryTest class to test the reservationRepository class using\rSpringBootTest with web environment and random port\rUse the Amazon Q Developer prompt below to create a method for your first test case. Prompt\rCreate a test method for successful save with valid data\rAttributes; flightId,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber,\rcontactEmail, reservationStatus, reservationDate, reservationTime, paymentStatus and passengerId.\rAssert BookingReference is not null\rRight click on ReservationRepositoryTest, then select Run ReservationRepositoryTest so that it can run all test cases in this class. I passed the test case, and the test data appeared in the database. Complete code for PassengerRepositoryTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import org.springframework.test.context.junit4.SpringRunner; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.repository.PassengerRepository; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; /* Create Junit test cases for PassengerRepository using web environment with random port. Create test case for save method by creating test data for firstName, lastName, adult and gender. Assert that the passenger Id is not null */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class PassengerRepositoryTest { @Autowired PassengerRepository passengerRepository; @Test public void savePassengerTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;Test\u0026#34;); passenger.setLastName(\u0026#34;Test\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;M\u0026#34;); passengerRepository.save(passenger); Assert.assertNotNull(passenger.getPassengerId()); } } Complete code for ReservationRepositoryTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.repository.ReservationRepository; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; /* Create ReservationRepositoryTest class to test the reservationRepository class using SpringBootTest with web environment and random port */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class ReservationRepositoryTest { @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Autowired ReservationRepository reservationRepository; /* Create a test method for successful save with valid data Attributes; flightId,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, reservationDate, reservationTime, paymentStatus and passengerId. Assert BookingReference is not null */ @Test public void testSaveReservation() { Reservation reservation = new Reservation(); reservation.setFlightId(1); reservation.setTravelClass(\u0026#34;Economy\u0026#34;); reservation.setTicketPrice(1000); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;XXXXXXXXXXXXX\u0026#34;); reservation.setReservationStatus(\u0026#34;Confirmed\u0026#34;); reservation.setReservationDate(\u0026#34;2022-01-01\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setPassengerId(1); Reservation savedReservation = reservationRepository.save(reservation); Assert.assertNotNull(savedReservation.getBookingReference()); } } "
},
{
	"uri": "//localhost:1313/5-clean-up/",
	"title": "Clean up",
	"tags": [],
	"description": "",
	"content": " We proceed to delete the Stack that we loaded the .yaml file provided by Workshop. Go to CloudFormation, go to Stacks and tick the stack that we created for Workshop. Then we click Delete, and wait for the deletion process to complete, it will automatically delete related resources. For example, the EC2 instance that we used during the Lab process was automatically terminated. "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/5-config-datasource-module1/",
	"title": "Data Source configuration",
	"tags": [],
	"description": "",
	"content": " You will build a Configuration Class to dynamically configure database credentials from AWS Secrets Manager. Open the DataSourceConfig.java under the src/main/java/com.airlines.catalog/config folder and add the following import statements. Use the following prompt to create DataSourceConfig class and get the configurations required from application.properties file. Delete any methods created inside the class by Amazon Q Developer. Prompt\r*Create public class DataSourceConfig and 2 member variables awsRegion and secretName. Autowire these variables with aws.region and secretmanager.key from application.properties file.*\r-Use the following prompt to create getSecret method that will get the database connection string from AWS Secrets Manager.\nPrompt\r*Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using member variables awsRegion and secretName.*\rUse the prompt below create getDataSource method that will call the getSecret method and build the data source object. Prompt\r*Create a method getDataSource to build the datasource object.*\n*Call the getSecret function. Parse the returned JSON string to extract host, port, db, username and password. Then configure the mysql url, username and password of the datasource object.*\n*Return the datasource object. Throw any Json Processing exception.*\nComplete code for DataSourceConfig class package com.airlines.catalog.config; import com.fasterxml.jackson.core.JsonProcessingException; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import software.amazon.awssdk.regions.Region; import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient; import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest; import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse; import software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException; import org.springframework.boot.jdbc.DataSourceBuilder; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import javax.sql.DataSource; /*Create public class DataSourceConfig and 2 member variables awsRegion and secretName. Autowire these variables with aws.region and secretmanager.key from application.properties file. */ @Configuration public class DataSourceConfig { @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${secretmanager.key}\u0026#34;) private String secretName; /* Create a private getSecret method that connects to AWS Secrets Manager and gets the secret string using member variables awsRegion and secretName. Catch and throw Secret Manager exceptions */ private String getSecret() { Region region = Region.of(awsRegion); SecretsManagerClient client = SecretsManagerClient.builder() .region(region) .build(); GetSecretValueRequest valueRequest = GetSecretValueRequest.builder() .secretId(secretName) .build(); GetSecretValueResponse valueResponse = client.getSecretValue(valueRequest); return valueResponse.secretString(); } /* Create a method getDataSource to build the datasource object. Call the getSecret function. Parse the returned JSON string to extract host, port, db, username and password. Then configure the mysql url, username and password of the datasource object. Return the datasource object. Throw any Json Processing exception. */ @Bean public DataSource getDataSource() throws JsonProcessingException { DataSourceBuilder\u0026lt;?\u0026gt; dataSourceBuilder = DataSourceBuilder.create(); String secret = getSecret(); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true); JsonNode jsonNode = objectMapper.readTree(secret); String host = jsonNode.get(\u0026#34;host\u0026#34;).asText(); int port = jsonNode.get(\u0026#34;port\u0026#34;).asInt(); String db = jsonNode.get(\u0026#34;db\u0026#34;).asText(); String username = jsonNode.get(\u0026#34;username\u0026#34;).asText(); String password = jsonNode.get(\u0026#34;password\u0026#34;).asText(); dataSourceBuilder.url(\u0026#34;jdbc:mysql://\u0026#34; + host + \u0026#34;:\u0026#34; + port + \u0026#34;/\u0026#34; + db); dataSourceBuilder.username(username); dataSourceBuilder.password(password); return dataSourceBuilder.build(); } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/5-handle-bussiness-exceptions-module2/",
	"title": "Handle Business Exceptions",
	"tags": [],
	"description": "",
	"content": " Next you will create exception handler classes to handle following business exception: Invalid data inputs to the reservation API, invalid flight Id and no seats available in the flight. Open the GlobalExceptionHandler.java file under the src/main/java/com.airlines.catalog/exception folder, from the Amazon Q Chat Panel in your IDE, use the below prompt to create the complete GlobalExceptionHandler class. Click on Copy button below the code panel and paste the code into the GlobalExceptionHandler.java file. This class will be used to handle the exceptions when invalid inputs are provided to bookFlight API. Prompt\rCreate a rest controller advice GlobalExceptionHandler with handleValidationErrors method that gets all the errors and returns ResponseEntity with hash map Open the FlightNotFoundException.java under the src/main/java/com.airlines.catalog/exception folder and add the following import statements. Use the prompts to below to handle exception when invalid flight Id provided for reservation exception Prompt\rCreate a public class FlightNotFoundException that extends Runtime Exception with member variable response entity.\rCreate constructor with flightId as input parameter\rException message returned should be \"No flights found for the flight id \" and append flight id\rOpen the RequestedSeatsNotAvailable.java under the src/main/java/com.airlines.catalog/exception folder and add the following import statements. Use the prompts to below to handle exception when no seats available in the flight for reservation. Prompt\rCreate a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable response entity and returns an exception message e \"Seats not available. Reservation could not be made\"\rComplete code for GlobalExceptionHandler class package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.validation.FieldError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import java.util.HashMap; import java.util.Map; @ControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(MethodArgumentNotValidException.class) public ResponseEntity\u0026lt;Map\u0026lt;String, String\u0026gt;\u0026gt; handleValidationErrors(MethodArgumentNotValidException ex) { Map\u0026lt;String, String\u0026gt; errors = new HashMap\u0026lt;\u0026gt;(); ex.getBindingResult().getAllErrors().forEach(error -\u0026gt; { String fieldName = ((FieldError) error).getField(); String errorMessage = error.getDefaultMessage(); errors.put(fieldName, errorMessage); }); return new ResponseEntity\u0026lt;\u0026gt;(errors, HttpStatus.BAD_REQUEST); } } Complete code for FlightNotFoundException class package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /* Create a public class FlightNotFoundException that extends Runtime Exception with member variable response entity. Create constructor with flightId as input parameter Exception message returned should be \u0026#34;No flights found for the flight id \u0026#34; and append flight id */ @Getter public class FlightNotFoundException extends RuntimeException { private ResponseEntity\u0026lt;String\u0026gt; responseEntity; public FlightNotFoundException(String flightId) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found for the flight id \u0026#34; + flightId, HttpStatus.BAD_REQUEST); } } Complete code for RequestedSeatsNotAvailable class package com.airlines.catalog.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /* Create a public class RequestedSeatsNotAvailable that extends Runtime Exception with member variable response entity and returns an exception message e \u0026#34;Seats not available. Reservation could not be made\u0026#34; */ @Getter public class RequestedSeatsNotAvailable extends RuntimeException { private ResponseEntity\u0026lt;String\u0026gt; responseEntity; public RequestedSeatsNotAvailable() { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Seats not available. Reservation could not be made\u0026#34;, HttpStatus.BAD_REQUEST); } } "
},
{
	"uri": "//localhost:1313/1-config-environment/5-openning-project-intelij/",
	"title": "Open the prompt project in IntelliJ IDE",
	"tags": [],
	"description": "",
	"content": " Inside the EC2 instance, open the folder C:/Users/Administrator/IdeaProjects/AppCodeArchive and you should be able to see one the folder Airline-Booking-PromptProject. This has IntelliJ the project that you will use to develop the workshop. Now open that project with Intellij IDEA From the left menu of your IntelliJ Project, expand the src folder and go to src/main/resources. Open the \u0026ldquo;application.properties\u0026rdquo; file. Update aws.region with the region you are running the workshop in and secretmanager.key as RDSSecretForApp. Go to CloudFormation, click on the stack you created. Then select via the Outputs tab, get the values ​​of cognito.userpool.id from the CognitoProviderName field (Last part of the URL) and sns.arn from the SNSTopic field. Update the values ​​for these keys in the application.properties file. "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/6-service-classes-module1/",
	"title": "Build the service class",
	"tags": [],
	"description": "",
	"content": " You will build the service class that will fetch the data from flight table to get available flights based on input parameters. It will also enrich the airport details from the airport table and return a flightDetails object. Open the FlightDetailsService.java under the src/main/java/com.airlines.catalog/service folder and add the following imports Next we create the FlightDetailService class. Under the FlightDetailsService class, use the following prompt to create the populateFlightDetails method Prompt\r*Create private method populateFlightDetails method which takes flight, arrival airport and departure airport as input parameters and returns flightDetails object.*\rInside the populateFlightDetails method, use the following prompt to add the flight and airport details into FlightDetails DTO. Review the fields, attributes and update code as needed. Ensure that Flight, Airport FlightDetails, FlightReposiotry and Airport Repositoryand files are open in IDE, to get the Amazon Q multi-file context to work. Prompt\r*Match and Assign all the attributes from flight, arrivalAirport and departureAirport object to flightDetails object.*\rCreate the findFlights method by using the prompts below. Run the prompts one by one. Prompt1\rCreate a method for findFlights which takes departureDate, departureAirportCode, arrivalAirportCode, flightRepository and airportRepository as parameters and returns a list of flightDetails object.\rPrompt2\rFirst call the flightRepository findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method to get the iterable object of flight.\rPrompt3\rLoop through the flights\rFor each flight in the flights object call\rAirportRepository findByAirportCode to get departureAiport\rAirportRepository findByAirportCode to get arrivalAiport\rpopulateFlightDetails method to get flightDetails object.\rCode hoàn chỉnh cho lớp FlightDetailsService package com.airlines.catalog.service; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.model.Airport; import com.airlines.catalog.model.Flight; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.ArrayList; import java.util.List; /* Create FlightDetailsService class */ @Service public class FlightDetailsService { @Autowired FlightRepository flightRepository; @Autowired AirportRepository airportRepository; /* Create private method populateFlightDetails method which takes flight, arrival airport and departure airport as input parameters and returns flightDetails object. */ private FlightDetails populateFlightDetails(Flight flight, Airport arrivalAirport, Airport departureAirport) { /* Match and Assign all the attributes from flight, arrivalAirport and departureAirport object to flightDetails object. */ FlightDetails flightDetails = new FlightDetails(); flightDetails.setFlightId(flight.getId()); flightDetails.setDepartureDate(flight.getDepartureDate()); flightDetails.setDepartureTime(flight.getDepartureTime()); flightDetails.setArrivalDate(flight.getArrivalDate()); flightDetails.setArrivalTime(flight.getArrivalTime()); flightDetails.setArrivalAirportCode(arrivalAirport.getAirportCode()); flightDetails.setArrivalAirportName(arrivalAirport.getAirportName()); flightDetails.setArrivalAirportCity(arrivalAirport.getAirportCity()); flightDetails.setArrivalAirportLocale(arrivalAirport.getAirportLocale()); flightDetails.setDepartureAirportCode(departureAirport.getAirportCode()); flightDetails.setDepartureAirportName(departureAirport.getAirportName()); flightDetails.setDepartureAirportCity(departureAirport.getAirportCity()); flightDetails.setDepartureAirportLocale(departureAirport.getAirportLocale()); flightDetails.setFlightDuration(flight.getFlightDuration()); flightDetails.setTicketPrice(flight.getTicketPrice()); flightDetails.setTicketCurrency(flight.getTicketCurrency()); flightDetails.setSeatAvailable(flight.getSeatAvailable()); flightDetails.setFlightNumber(flight.getFlightNumber()); return flightDetails; } /* Create a method for findFlights which takes departureDate, departureAirportCode, arrivalAirportCode, flightRepository and airportRepository as parameters and returns a list of flightDetails object */ public List\u0026lt;FlightDetails\u0026gt; findFlights(String departureDate, String departureAirportCode, String arrivalAirportCode, FlightRepository flightRepository, AirportRepository airportRepository) { /* first call the flightRepository findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method to get the iterable object of flight.*/ Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); /* Loop through the flights object. For each flight in the flights object call AirportRepository findByAirportCode to get departureAiport call AirportRepository findByAirportCode to get arrivalAiport call populateFlightDetails method to get flightDetails object. */ List\u0026lt;FlightDetails\u0026gt; flightDetailsList = new ArrayList\u0026lt;\u0026gt;(); for (Flight flight : flights) { Airport departureAirport = airportRepository.findByAirportCode(flight.getDepartureAirportCode()); Airport arrivalAirport = airportRepository.findByAirportCode(flight.getArrivalAirportCode()); FlightDetails flightDetails = populateFlightDetails(flight, arrivalAirport, departureAirport); flightDetailsList.add(flightDetails); } return flightDetailsList; } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/6-service-classes-module2/",
	"title": "Build the service class",
	"tags": [],
	"description": "",
	"content": " Now you will build the FlightBooking service class that creates a new database transaction to save the passenger, reservation data into respective tables and also send an SNS notification to reservation-success topic. An email notification will be sent to the configured email address. This method will also check for seat availability before proceeding with the reservation and throw an business exception, if seats are not available. Open the FlightBooking.java under the src/main/java/com.airlines.catalog/service folder and add the following imports Under the FlightBooking class, use the following prompt to create the sendNotification method. This will send the notification to SNS topic. Prompt\rCreate a method send message with message, sns arn and AWS Region as input parameter Add another method reserveFlight by using the prompt below. This will perform the required logic to validate the data, save the data using repository methods created earlier and send the notfication using the sendNotification method created above. Prompt\rCreate reserveFlight method with passenger, reservation, passengerRepository, reservationRepository,flightresultsRepository, number of passengers, topicArn and region as input parameters. Method should return a Boolean output\rGet the flight details by calling findById method from FlightresultsRepository with flightId as input parameter if no of flight is null throw FlightNotFoundException\rCall getSeatAvailable from flight object to get the available seats\rIf number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception\rIf seats available is greater than or equal to number of passengers then\rdecrease the seats available attribute in flight object by calling setseatAvailable method\rSave the passenger and get the passenger id\rupdate the reservation object with the passenger id save the reservation details call sendMessage by passing reservation json string as input parameter\rMethod should return True or False based on the result of save methods\rAll of the above steps should be done within a transaction.\rComplete code for sendNotification method @Service public class FlightBooking { /* create a method send message with message, sns arn and AWS Region as input parameter */ public static void sendMessage(String message, String topicArn, Region region) { SnsClient snsClient = SnsClient.builder() .region(region) .build(); PublishRequest request = PublishRequest.builder() .message(message) .topicArn(topicArn) .build(); PublishResponse result = snsClient.publish(request); System.out.println(\u0026#34;Message sent successfully. Message ID: \u0026#34; + result.messageId()); } } Complete code for FlightBooking service class package com.airlines.catalog.service; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import com.airlines.catalog.model.Flight; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.ReservationRepository; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional; import software.amazon.awssdk.regions.Region; import software.amazon.awssdk.services.sns.SnsClient; import software.amazon.awssdk.services.sns.model.PublishRequest; import software.amazon.awssdk.services.sns.model.PublishResponse; @Service public class FlightBooking { /* create a method send message with sns arn and AWS Region as input parameter*/ public void sendMessage(String message, String arn, Region region) { SnsClient snsClient = SnsClient.builder() .region(region) .build(); PublishRequest request = PublishRequest.builder() .message(message) .topicArn(arn) .build(); PublishResponse result = snsClient.publish(request); System.out.println(result.messageId() + \u0026#34; Message sent. Status is \u0026#34; + result.sdkHttpResponse().statusCode()); snsClient.close(); } /* Create reserveFlight method with passenger, reservation, passengerRepository, reservationRepository,flightresultsRepository, number of passengers, topicArn and region as input parameters. Method should return a Boolean output Get the flight details by calling findById method from FlightresultsRepository with flightId as input parameter if no of flight is null throw FlightNotFoundException Call getSeatAvailable from flight object to get the available seats If number of seats is less than number of passengers throw RequestedSeatsNotAvailable exception If seats available is greater than or equal to number of passengers then decrease the seats available attribute in flight object by calling setseatAvailable method Save the passenger and get the passenger id update the reservation object with the passenger id save the reservation details call sendMessage by passing reservation json string as input parameter Method should return True or False based on the result of save methods All of the above steps should be done within a transaction. */ @Transactional(propagation = Propagation.REQUIRED) public Boolean reserveFlight(Passenger passenger, Reservation reservation, PassengerRepository passengerRepository, ReservationRepository reservationRepository, FlightRepository flightRepository, int numberOfPassengers, String topicArn, Region region) throws FlightNotFoundException, RequestedSeatsNotAvailable { Flight flight = flightRepository.findById(reservation.getFlightId()); if (flight == null) { throw new FlightNotFoundException(reservation.getFlightId()); } if (flight.getSeatAvailable() \u0026lt; numberOfPassengers) { throw new RequestedSeatsNotAvailable(); } flight.setSeatAvailable(flight.getSeatAvailable() - numberOfPassengers); flightRepository.save(flight); Passenger passenger1 = passengerRepository.save(passenger); reservation.setPassengerId(passenger1.getPassengerId()); reservationRepository.save(reservation); sendMessage(reservation.toString(), topicArn, region); return true; } } "
},
{
	"uri": "//localhost:1313/1-config-environment/6-setup-amazonq/",
	"title": "Setup Amazon Q Developer",
	"tags": [],
	"description": "",
	"content": " From the right hand tool bar in the JetBrains panel, choose the Choose the Amazon Q Icon to open the Amazon Q Chat Window. Then choose Use for Free and click Continue button. After logging in and creating a Builder ID, we can use AmazonQ in JetBrains. "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/7-unit-test-flightbooking-service-classes/",
	"title": "Unit Test FlightBooking service class",
	"tags": [],
	"description": "",
	"content": " Now you will build the unit test scripts for FlightBooking service with Junit. Test scripts will integrate with backend services and AWS services or Java classes will not be mocked. Open FlightBookingServiceTest.java in the folder test/java/com.airlines.catalog.test/ and add the following import statements. Create the class to test the FlightBooking Service Prompt\rCreate FlightBookingServiceTest class to test the flightBooking service using web environment with random port.\rAutowire sns.arn, aws.region from properties file\rFirst test scenario - reservation success with valid input parameters. Reservation should be successful with data saved in passenger, reservation tables and a notification email received. Prompt\rCreate reserve flight success test method.\rCreate Passenger object by setting attributes firstName, lastName, Adult=true and gender=male\rcreate Reservation object class by setting attributes flightId=1,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus,passengerId, reservationDate,\rreservationTime, paymentStatus\rCreate AWS region object\rAdd this code to call the reserveFlight method Code\rAssert.assertTrue(flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 1, snsArn, region));\rSecond test scenario - reservation failure scenario with invalid flight id as input Prompt\rCreate reserve flight invalid flightId test method.\rCreate passenger object by setting attributes firstName, lastName, Adult=true and gender\rCreate reservation object class by setting attributes flightId=10000,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate,\rreservationTime, paymentStatus\rCreate AWS region object\rasset if the exception contains 'No flights found\"\rIf try / catch block is not added around the reserveFlight method, please add. Amazon Q Developer will provide recommendations line by line Update the number of seat_available columnn in flight table to 0 for id=5 by running the SQL statement below in MYSQL Workbench. Code\rupdate flight set seat_available =0 where id=5; Third test scenario - reservation failure scenario with no seats available for the requested flight id. Prompt\rCreate reserve flight insufficient seats method.\rCreate passenger object by setting attributes firstName, lastName, Adult=true and gender\rCreate reservation object class by setting attributes flightId=5,travelClass, ticketPrice,\rcurrencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId,\rreservationDate, reservationTime, paymentStatus\rCreate AWS region object.\rasset if the exception contains 'Seats not available\".\rAgain, if try / catch block is not added around the reserveFlight method, please add. Amazon Q Developer will provide recommendations line by line We will run the test cases we just created, and I have passed 3 test cases. Next, we check the database to see if the successful booking test cases have data added to the database. We will check the data in both the passenger and reservation tables, then we will receive a notification email, if the above conditions are met, I have succeeded. Complete code for FlightBookingServiceTest class package com.airlines.catalog.test; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Reservation; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.repository.ReservationRepository; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightBooking; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import software.amazon.awssdk.regions.Region; /* Create FlightBookingTest class to test the FlightBooking service using web environment with random port. Autowire sns.arn, aws.region from properties file */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightBookingServiceTest { @Autowired FlightBooking flightBooking; @Autowired FlightRepository flightRepository; @Autowired PassengerRepository passengerRepository; @Autowired ReservationRepository reservationRepository; @Value(\u0026#34;${sns.arn}\u0026#34;) String snsArn; @Value(\u0026#34;${aws.region}\u0026#34;) String awsRegion; /* Create reserve flight success test method. Create Passenger object by setting attributes firstName, lastName, Adult=true and gender=male create Reservation object class by setting attributes flightId=1,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus,passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object */ @Test public void reserveFlightSuccessTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;XXXX\u0026#34;); passenger.setLastName(\u0026#34;XXX\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(1); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;abc@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); Assert.assertTrue(flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 1, snsArn, region)); } /* Create reserve flight invalid flightId test method. Create passenger object by setting attributes firstName, lastName, Adult=true and gender Create reservation object class by setting attributes flightId=10000,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object asset if the exception contains \u0026#39;No flights found\u0026#34; */ @Test public void reserveFlightInvalidFlightIdTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;XXXX\u0026#34;); passenger.setLastName(\u0026#34;XXX\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(10000); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;abc@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); try { Assert.assertThrows(FlightNotFoundException.class, () -\u0026gt; flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 10000, snsArn, region)); } catch (FlightNotFoundException e) { Assert.assertEquals(\u0026#34;No flights found\u0026#34;, e.getMessage()); } } /* Create reserve flight insufficient seats method. Create passenger object by setting attributes firstName, lastName, Adult=true and gender Create reservation object class by setting attributes flightId=5,travelClass, ticketPrice, currencyCode, paymentMode,contactNumber, contactEmail, reservationStatus, passengerId, reservationDate, reservationTime, paymentStatus Create AWS region object. asset if the exception contains \u0026#39;Seats not available\u0026#34;. */ @Test public void reserveFlightInsufficientSeatsTest() { Passenger passenger = new Passenger(); passenger.setFirstName(\u0026#34;Test\u0026#34;); passenger.setLastName(\u0026#34;Test\u0026#34;); passenger.setAdult(true); passenger.setGender(\u0026#34;male\u0026#34;); Reservation reservation = new Reservation(); reservation.setFlightId(5); reservation.setTravelClass(\u0026#34;economy\u0026#34;); reservation.setTicketPrice(100); reservation.setCurrencyCode(\u0026#34;USD\u0026#34;); reservation.setPaymentMode(\u0026#34;credit card\u0026#34;); reservation.setContactNumber(\u0026#34;1234567890\u0026#34;); reservation.setContactEmail(\u0026#34;test@gmail.com\u0026#34;); reservation.setReservationStatus(\u0026#34;pending\u0026#34;); reservation.setPaymentStatus(\u0026#34;Paid\u0026#34;); reservation.setReservationDate(\u0026#34;2023-10-25\u0026#34;); reservation.setReservationTime(\u0026#34;12:00:00\u0026#34;); reservation.setPassengerId(passenger.getPassengerId()); Region region = Region.of(awsRegion); try { Assert.assertThrows(RequestedSeatsNotAvailable.class, () -\u0026gt; flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightRepository, 5, snsArn, region)); } catch (RequestedSeatsNotAvailable e) { Assert.assertEquals(\u0026#34;Seats not available\u0026#34;, e.getMessage()); } } } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/7-unit-test-repository-classes-module1/",
	"title": "Unit Testing of the repository classes",
	"tags": [],
	"description": "",
	"content": " Now we will unit test the repository classes. The testing will performed by direct integration with RDS (No Mocking). Open AirportRepositoryTest.java under the test/java/com.airlines.catalog.test/ folder and add the following imports. Use the prompt below to build unit test cases for AirportRepository class Prompt\r*Create AirportRepositoryTest class to test the AirportRepository class using web environment with random port.*\n*First negative test case: method with Invalid airport code - \"LHG\" which should assert a null object*\n*Second positive test case: method with valid airport code - \"LHR\" which should assert a not null object*\nClick on the arrow to the left of AirportRepositoryTest class declaration and choose Run AirportRepositoryTest. It will run all the test cases in the class. If any test fails, check the spring boot errors in the IDE. If the exception is because of HibernateJpaConfiguration configuration errors check the \u0026ldquo;application.properties\u0026rdquo; file to ensure right values are populated for aws.region and secretmanager.key. Also check if the security group for RDS has allowed communication from the IP of the machine where this program is running. If Spring Boot starts successfully then check assertion code and verify that the test data in the airport table is populated according to the test case. I ran and passed all the test cases. Open FlightRepositoryTest.java under the test/java/com.airlines.catalog.test/ folder and add the following imports Build Unit test cases for FlightRepository class using the prompt below. Change the test data values in prompt based on the data you loaded previously into the flight table. Prompt\r*Create FlightRepositoryTest class to test the FlightRepository class using web environment with random port.*\n*Test cases for testing findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method that returns an iterable.*\n*First test case method with no results using departure date as \"2023-08-01\", departure airport code as \"CDG\" and arrival airport code as \"LAX\".*\n*Second test case method with single results using departure date as \"2023-08-02\", departure airport code as \"LHR\" and arrival airport code as \"CDG\" .*\n*Third test case method with multiple results using departure date as \"2023-08-01\", departure airport code as \"MIA\" and arrival airport code as \"LAX\".*\nClick on the arrow to the left of FlightRepositoryTest class declaration and choose Run FlightRepositoryTest. It will run all the test cases in the class. If any test fails, check the spring boot errors in the IDE. If the exception is because of HibernateJpaConfiguration configuration errors check the \u0026ldquo;application.properties\u0026rdquo; file to ensure right values are populated for aws.region and secretmanager.key. If Spring Boot starts successfully then check assertion code and verify that the test data in the flight table is populated according to the test case. I ran and all 3 test cases passed. Complete code for FlightRepositoryTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.model.Flight; import com.airlines.catalog.repository.FlightRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; /* Create FlightRepositoryTest class to test the FlightRepository class using web environment with random port. Test cases for testing findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode method that returns an iterable. First test case method with no results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;CDG\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;. Second test case method with single results using departure date as \u0026#34;2023-08-02\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34; and arrival airport code as \u0026#34;CDG\u0026#34; . Third test case method with multiple results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;MIA\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightRepositoryTest { @Autowired private FlightRepository flightRepository; @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_NoResults() { String departureDate = \u0026#34;2023-08-01\u0026#34;; String departureAirportCode = \u0026#34;CDG\u0026#34;; String arrivalAirportCode = \u0026#34;LAX\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertFalse(flights.iterator().hasNext()); } @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_SingleResult() { String departureDate = \u0026#34;2023-08-02\u0026#34;; String departureAirportCode = \u0026#34;LHR\u0026#34;; String arrivalAirportCode = \u0026#34;CDG\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertTrue(flights.iterator().hasNext()); Assert.assertEquals(1, flights.spliterator().getExactSizeIfKnown()); } @Test public void findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode_MultipleResults() { String departureDate = \u0026#34;2023-08-01\u0026#34;; String departureAirportCode = \u0026#34;MIA\u0026#34;; String arrivalAirportCode = \u0026#34;LAX\u0026#34;; Iterable\u0026lt;Flight\u0026gt; flights = flightRepository.findByDepartureDateAndDepartureAirportCodeAndArrivalAirportCode(departureDate, departureAirportCode, arrivalAirportCode); Assert.assertNotNull(flights); Assert.assertTrue(flights.iterator().hasNext()); Assert.assertEquals(2, flights.spliterator().getExactSizeIfKnown()); } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/8-dto-reservation-details/",
	"title": "Create DTO Reservation Details",
	"tags": [],
	"description": "",
	"content": " Now you will create a ReservationDetails DTO class that will be used to validate all and capture the input parameters provided to the bookFlight API.\nOpen ReservationDetails.java under the src/main/java/com.airlines.catalog/dto folder.\nFrom the Amazon Q Chat Panel in your IDE, use the below prompt to create the complete ReservationDetails class. Click on Copy button below the code panel and paste the code into the ReservationDetails.java file. Prompt\rCreate a class ReservationDetails with attributes\rfirstName not blank, lastName not blank,\rgender, age between 1 and 120, flightId as int, travelClass not blank,\rticketPrice as double and not blank,\rcurrencyCode exactly 3 characters, reservationStatus, paymentStatus,\rpaymentMode, ContactEmail should be valid email, contactNumber should be valid phone number\rComplete code for reservationDetails class\npackage com.airlines.catalog.dto; import lombok.Data; import javax.validation.constraints.Email; import javax.validation.constraints.Min; import javax.validation.constraints.Max; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Pattern; import javax.validation.constraints.Positive; @Data public class ReservationDetails { @NotBlank(message = \u0026#34;First name cannot be blank\u0026#34;) private String firstName; @NotBlank(message = \u0026#34;Last name cannot be blank\u0026#34;) private String lastName; private String gender; @Min(value = 1, message = \u0026#34;Age should be between 1 and 120\u0026#34;) @Max(value = 120, message = \u0026#34;Age should be between 1 and 120\u0026#34;) private int age; @Positive(message = \u0026#34;Flight ID must be a positive integer\u0026#34;) private int flightId; @NotBlank(message = \u0026#34;Travel class cannot be blank\u0026#34;) private String travelClass; @Positive(message = \u0026#34;Ticket price must be a positive value\u0026#34;) private double ticketPrice; @Pattern(regexp = \u0026#34;^[A-Z]{3}$\u0026#34;, message = \u0026#34;Currency code must be exactly 3 uppercase letters\u0026#34;) private String currencyCode; private String reservationStatus; private String paymentStatus; private String paymentMode; @Email(message = \u0026#34;Invalid email address\u0026#34;) private String contactEmail; @Pattern(regexp = \u0026#34;^\\\\d{10}$\u0026#34;, message = \u0026#34;Contact number must be a 10-digit number\u0026#34;) private String contactNumber; } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/8-unit-test-service-classes-module1/",
	"title": "Unit Test the service class",
	"tags": [],
	"description": "",
	"content": " Now you will unit test the FlightDetailsService class using Junit. These test cases will validate the flow from service to the database (no mocking). Open FlightDetailsServiceTest.java under the test/java/com.airlines.catalog.test/ folder and add the following imports Create the class to test the FlightDetailsService First Test scenario: No flights found for the departure date, source and destination city. Prompt\rFirst test case method with no results using departure date as \"2023-08-01\", departure airport code as \"CDG\" and arrival airport code as \"LAX\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 0\rSecond Test scenario: Only one flight found for the departure date, source and destination city. Prompt\rSecond test case method with single results using departure date as \"2023-08-02\", departure airport code as \"LHR\", arrival airport code as \"CDG\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 1\rThird Test scenario: Two flights found for the departure date, source and destination city. Prompt\rThird test case method with multiple results using departure date as \"2023-08-01\", departure airport code as \"LHR\", arrival airport code as \"CDG\", flightresultsRepository and airportresultsRepository as parameters. Assert count as 2\rClick on the arrow to the left of FlightDetailsServiceTest class declaration and choose Run FlightDetailsServiceTest. It will run all the test cases in the class. If any test fails, check the spring boot errors in the IDE. If the repository unit test cases were successful earlier, then check the assertion code. Verify if test data passed to the findFlights method matches with the test data in airport and flight tables. Complete code for FlightDetailsServiceTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.service.FlightDetailsService; import org.junit.Assert; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import java.util.ArrayList; import java.util.List; /* Create FlightDetailsServiceTest class to test the FlightDetailsService using web environment with random port. Test cases for testing findFlights method in this class which returns list of flightDetails. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class FlightDetailsServiceTest { @Autowired FlightDetailsService flightDetailsService; @Autowired FlightRepository flightRepository; @Autowired AirportRepository airportRepository; @Value(\u0026#34;${server.port}\u0026#34;) private int port; /* First test case method with no results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;CDG\u0026#34; and arrival airport code as \u0026#34;LAX\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 0 */ @Test public void findFlightsTest() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-01\u0026#34;, \u0026#34;CDG\u0026#34;, \u0026#34;LAX\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(0, flightDetailsList.size()); } /* Second test case method with single results using departure date as \u0026#34;2023-08-02\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34;, arrival airport code as \u0026#34;CDG\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 1 */ @Test public void findFlightsTest2() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-02\u0026#34;, \u0026#34;LHR\u0026#34;, \u0026#34;CDG\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(1, flightDetailsList.size()); } /* Third test case method with multiple results using departure date as \u0026#34;2023-08-01\u0026#34;, departure airport code as \u0026#34;LHR\u0026#34;, arrival airport code as \u0026#34;CDG\u0026#34;, flightresultsRepository and airportresultsRepository as parameters. Assert count as 2 */ @Test public void findFlightsTest3() { List\u0026lt;FlightDetails\u0026gt; flightDetailsList = flightDetailsService.findFlights(\u0026#34;2023-08-01\u0026#34;, \u0026#34;LHR\u0026#34;, \u0026#34;CDG\u0026#34;, flightRepository, airportRepository); Assert.assertEquals(2, flightDetailsList.size()); } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/9-book-flight-api-controller/",
	"title": "Create the book flight API Controller",
	"tags": [],
	"description": "",
	"content": " Finally, add the bookFlight method to the controller created earlier to provide the flight reservation capability. Open the FlightReservation.java under the src/main/java/com.airlines.catalog/controller folder and add the new additional imports. Code\rimport com.airlines.catalog.repository.PassengerRepository;\rimport com.airlines.catalog.repository.ReservationRepository;\rimport com.airlines.catalog.service.FlightBooking;\rimport com.airlines.catalog.dto.ReservationDetails;\rimport com.airlines.catalog.exception.FlightNotFoundException;\rimport com.airlines.catalog.exception.RequestedSeatsNotAvailable;\rimport com.airlines.catalog.model.Passenger;\rimport com.airlines.catalog.model.Reservation;\rimport org.springframework.web.bind.annotation.*;\rimport software.amazon.awssdk.regions.Region;\rimport javax.validation.Valid;\rAutowire the new services and repositories created. Code\r@Autowired\nPassengerRepository passengerRepository;\n@Autowired\nReservationRepository reservationRepository;\n@Autowired\nFlightBooking flightBooking;\rFrom here on follow line by line approach to generate the code recommendations for bookFlight method. Use the prompt below to generate the rest controller method signature. Prompt\r```\r/* Create a rest controller bookFlight to get flight details with HTTP POST Method ,\r/reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string\rAuthorization token is passed in the header of the request.\r```\rValidate the JWT token passed in the Authorization Header. Prompt\r```\rvalidate the token by calling verifyToken method in a try catch block. If token is valid set\rauthenticated flag to true\rCatch authenticationException and return the response entity object\rfrom the exception object\r```\rCreate the Passenger Entity from the request body. Prompt\rcreate passenger object assign first name, last name and gender of passenger object from reservationDetails object\rCheck if the passenger is adult or not. Prompt\rCheck the age from reservationDetails object and populate adult field\rCreate the Reservation Entity from the request body. Apply the below prompts one by one. Prompt\r```\rcreate reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail,\rcontactNumber, reservationStatus, paymentStatus, paymentMode ```\rPrompt\rset the date reservation date in yyyy-MM-dd format and\rreservation time in HH:mm:ss format for current date and time\rNow, add the code below to make the reservation. Boolean result; try { int noOfPassengers = 1; Region region = Region.of(awsRegion); result = FlightBooking.reserveFlight(passenger, reservation, PassengerRepository, ReservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region); } catch (FlightNotFoundException e) { return e.getResponseEntity(); } catch (RequestedSeatsNotAvailable e) { return e.getResponseEntity(); } Check the service execution result and return the response from API. Prompt\r```\rcheck if the reservation is successful\rreturn response entity object with HTTP status of ok and\rmessage \"reservation made successfully\" appending the reservation booking Reference number\rif the reservation is not successful\rreturn response entity object with HTTP status of bad request\r```\rComplete code for flightReservation class package com.airlines.catalog.controller; import java.nio.channels.ScatteringByteChannel; import java.util.List; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.exception.AuthenticationException; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightDetailsService; import com.auth0.jwt.JWT; import com.auth0.jwt.JWTVerifier; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.interfaces.DecodedJWT; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import com.airlines.catalog.repository.PassengerRepository; import com.airlines.catalog.repository.ReservationRepository; import com.airlines.catalog.service.FlightBooking; import com.airlines.catalog.dto.ReservationDetails; import com.airlines.catalog.exception.FlightNotFoundException; import com.airlines.catalog.exception.RequestedSeatsNotAvailable; import com.airlines.catalog.model.Passenger; import com.airlines.catalog.model.Reservation; import org.springframework.web.bind.annotation.*; import software.amazon.awssdk.regions.Region; import javax.validation.Valid; @RestController public class FlightReservation { @Autowired FlightRepository flightresultsRepository; @Autowired AirportRepository airportresultsRepository; @Autowired FlightDetailsService FlightDetailsService; @Autowired PassengerRepository passengerRepository; @Autowired ReservationRepository reservationRepository; @Autowired FlightBooking flightBooking; @Value(\u0026#34;${cognito.userpool.id}\u0026#34;) private String cognitoUserPoolId; @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${sns.arn}\u0026#34;) private String snsTopicArn; /* Create a private method verifyToken to verify JWT token with input parameters as Cognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. catch all Exception throw new authenticationException.*/ private Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException { try { System.out.println(\u0026#34;token=\u0026#34; + token); String cognitoWellKnownUrl = \u0026#34;https://cognito-idp.\u0026#34; + awsRegion + \u0026#34;.amazonaws.com/\u0026#34; + cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;; Algorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl)); JWTVerifier verifier = JWT.require(algorithm).build(); DecodedJWT decodedJWT = verifier.verify(token); return true; } catch (Exception e) { throw new AuthenticationException(e); } } /* Create a rest controller getFlightDetails to get flight details with HTTP GET Method , /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header. Rest controller returns a ResponseEntity of string. */ @GetMapping(\u0026#34;/flight\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate, @RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode, @RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException { /* Call verifyToken method, catch authentication exception and return the responseEntity if token is valid and call the findFlights method in FlightDetailsService class with input parameters departure date, departure airport code, arrival airport code, flightResultsRepository and airportResultsRepository. If flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;. If authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden */ try { if (verifyToken(cognitoUserPoolId, awsRegion, authorization)) { List\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository); if (flights.size() \u0026gt; 0) { return new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK); } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK); } } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } } catch (AuthenticationException e) { return e.getResponseEntity(); } } /* Create a rest controller bookFlight to get flight details with HTTP POST Method , /reserve path and request body reservationDetails. Rest controller returns a ResponseEntity of string. Authorization token is passed in the header of the request. */ @PostMapping(\u0026#34;/reserve\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; bookFlight(@Valid @RequestBody ReservationDetails reservationDetails, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws FlightNotFoundException, RequestedSeatsNotAvailable { ResponseEntity\u0026lt;String\u0026gt; responseEntity = null; /*validate the token by calling verifyToken method in a try catch block. If token is valid set authenticated flag to true Catch authenticationException and return the response entity object from the exception object */ Boolean authenticated = false; try { authenticated = verifyToken(cognitoUserPoolId, awsRegion, authorization); } catch (AuthenticationException e) { return e.getResponseEntity(); } if (!authenticated) { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } /* create passenger object assign first name, last name and gender of passenger object from reservationDetails object */ Passenger passenger = new Passenger(); passenger.setFirstName(reservationDetails.getFirstName()); passenger.setLastName(reservationDetails.getLastName()); passenger.setGender(reservationDetails.getGender()); //Check the age from reservationDetails object and populate adult field if (reservationDetails.getAge() \u0026gt;= 18) { passenger.setAdult(true); } /* create reservation object Assign flightId, travelClass, ticketPrice, currencyCode,contactEmail, contactNumber, reservationStatus, paymentStatus, paymentMode */ Reservation reservation = new Reservation(); reservation.setFlightId(reservationDetails.getFlightId()); reservation.setTravelClass(reservationDetails.getTravelClass()); reservation.setTicketPrice(reservationDetails.getTicketPrice()); reservation.setCurrencyCode(reservationDetails.getCurrencyCode()); reservation.setContactEmail(reservationDetails.getContactEmail()); reservation.setContactNumber(reservationDetails.getContactNumber()); reservation.setReservationStatus(\u0026#34;CONFIRMED\u0026#34;); reservation.setPaymentStatus(\u0026#34;PAID\u0026#34;); reservation.setPaymentMode(reservationDetails.getPaymentMode()); /* set the date reservation date in yyyy-MM-dd format and reservation time in HH:mm:ss format for current date and time*/ java.util.Date utilDate = new java.util.Date(); java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;); java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); String date = dateFormat.format(utilDate); String time = timeFormat.format(utilDate); reservation.setReservationDate(date); reservation.setReservationTime(time); Boolean result; try { int noOfPassengers = 1; Region region = Region.of(awsRegion); result = flightBooking.reserveFlight(passenger, reservation, passengerRepository, reservationRepository, flightresultsRepository, noOfPassengers, snsTopicArn, region); } catch (FlightNotFoundException e) { return e.getResponseEntity(); } catch (RequestedSeatsNotAvailable e) { return e.getResponseEntity(); } /* check if the reservation is successful return response entity object with HTTP status of ok and message \u0026#34;reservation made successfully\u0026#34; appending the booking Reference if the reservation is not successful return response entity object with HTTP status of Internal Server Error */ if (result) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation made successfully. Booking Reference: \u0026#34; + reservation.getBookingReference(), HttpStatus.OK); } else { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Reservation failed\u0026#34;, HttpStatus.INTERNAL_SERVER_ERROR); } return responseEntity; } } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/9-get-cognito-pkeys-module1/",
	"title": "Get Cognito public keys",
	"tags": [],
	"description": "",
	"content": " You will now build the RSA Key provider class to get the Cognito public key. This will be used to verify the JWT Token later. Open AwsCognitoRSAKeyProvider.java under src/main/java/com.airlines.catalog/controller folder and add the following imports Below is the Amazon Q Developer prompts to generate the class. Resolve errors in the generated code by working with in-line recommendations. Prompt\rCreate AwsCognitoRSAKeyProvider class to implement methods for public key verification.\rURL is provided as input\rAdd other mandatory methods to implement the interface . Handle all the exceptions\rComplete code for AwsCognitoRSAKeyProvider class package com.airlines.catalog.controller; import com.auth0.jwk.JwkException; import com.auth0.jwk.JwkProvider; import com.auth0.jwk.JwkProviderBuilder; import com.auth0.jwt.interfaces.RSAKeyProvider; import java.net.MalformedURLException; import java.net.URL; import java.security.interfaces.RSAPrivateKey; import java.security.interfaces.RSAPublicKey; /* create a AwsCognitoRSAKeyProvider class to implement methods for public key verification. URL is provided as input Add other mandatory methods to implement the interface. Handle all the exceptions. */ public class AwsCognitoRSAKeyProvider implements RSAKeyProvider { private final JwkProvider provider; public AwsCognitoRSAKeyProvider(String url) throws MalformedURLException { provider = new JwkProviderBuilder(new URL(url)).build(); } @Override public RSAPublicKey getPublicKeyById(String kid) { try { return (RSAPublicKey) provider.get(kid).getPublicKey(); } catch (JwkException e) { e.printStackTrace(); } return null; } @Override public RSAPrivateKey getPrivateKey() { return null; } @Override public String getPrivateKeyId() { return null; } } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/10-exception-handler-module1/",
	"title": "Build Exception Handler to handle Authentication Exceptions",
	"tags": [],
	"description": "",
	"content": " You will now build the exception handler to handle Cognito authentication errors and define custom application messages for few commonly encountered exceptions. Open the AuthenticationException.java under the src/main/java/com.airlines.catalog/exception folder and add the following imports: Use the prompt below to create the AuthenticationException class that will handle the exceptions related to JWT token validation. Prompt\rCreate a public class AuthenticationException that extends Runtime Exception with member variable response entity and constructor with Exception as input parameter.\rCheck for different types of JWT exceptions\rStore the message in member variable response entity\rVerify if all exception required exception types are handled - malformed URL, JWT decode, invalid claims and expired token.\nComplete code for AuthenticationException class\npackage com.airlines.catalog.exception; import com.auth0.jwt.exceptions.InvalidClaimException; import com.auth0.jwt.exceptions.JWTDecodeException; import com.auth0.jwt.exceptions.TokenExpiredException; import java.net.MalformedURLException; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import lombok.Getter; /*Create a public class AuthenticationException that extends Runtime Exception with member variable response entity and constructor with Exception as input parameter. Check for different types of JWT exceptions Store the message in member variable response entity. */ @Getter public class AuthenticationException extends RuntimeException { private ResponseEntity responseEntity; public AuthenticationException(Exception e) { if (e instanceof JWTDecodeException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Token\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof TokenExpiredException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Token Expired\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof InvalidClaimException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid Claim\u0026#34;, HttpStatus.UNAUTHORIZED); } else if (e instanceof MalformedURLException) { responseEntity = new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Invalid URL\u0026#34;, HttpStatus.UNAUTHORIZED); } } } "
},
{
	"uri": "//localhost:1313/3-module-2-flight-reservation-api/10-unit-test-reserve-flight-api/",
	"title": "Unit Testing of the reserve Flight API",
	"tags": [],
	"description": "",
	"content": " Now you will create the Junit test scripts amd unit test the Reserve Flight API. API will be integrated with the backend and tested via Postman. Open the ReserveFlightApiTest.java in the folder test/java/com.airlines.catalog.test/ and add the following imports. Code\rimport com.airlines.catalog.FlightBookingApplication;\nimport com.airlines.catalog.dto.ReservationDetails;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport static org.assertj.core.api.Assertions.assertThat;\nWe use the prompt below to create the ReserveFlightApiTest class, and delete the methods created by Amazon Q chat. Prompt\rCreate a ReserveFlightApiTest class to test the bookingApi using SpringBootTest\rNext we create the test cases. Test Scenario 1 - JWT Token is invalid. Set the Authorization Header as \u0026ldquo;Bearer invalidToken\u0026rdquo;. Ensure that valid email Id format, contactNumber format and age have valid values. Otherwise the test will fail as data validation happens before the token verification. Prompt\rNegative scenaio: 1, Invalid jwtToken\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber\rand contactEmail attributes\rCreate the HTTP headers object and pass the jwtToken.\rCall /reserve end point using post method pass reservationDetails as request body\rAssert that the response message is \"Invalid Token\"\rFor all the test scenarios below, use the token that you generated earlier from Cognito during Signup process. If you get token expired error then follow the \u0026ldquo;Sign-in\u0026rdquo; steps in \u0026ldquo;Set up Cognito\u0026rdquo; to get new token. Test Scenario 2 - Contact number is invalid and JWT Token is valid. Prompt\rNegative scenaio: Invalid Contact number\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, invalid contactNumber\rand contactEmail attributes\rcreate the HTTP headers object and pass the jwtToken\rcall /reserve end point using post method, pass reservationDetails as request body\rassert that the response message contains \"Contact Number should be valid phone number\"\rTest Scenario 3 - JWT Token and all input parameters are valid Prompt\rPositive scenario 1:\rcreate the reservationDetails object with fields firstName, lastName, gender, age,\rflightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber\rand contactEmail attributes\rcreate the HTTP headers object and pass the jwtToken\rcall /reserve end point using post method, pass reservationDetails as request body\rassert that http status OK\rand assert that the response message contains \"reservation made successfully\"\rNow we will log in to get the token and run this file, if it passes all then it is ok. I ran it and passed all 3 test cases. Complete code for bookingAPIReserveTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import com.airlines.catalog.dto.ReservationDetails; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.client.TestRestTemplate; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import static org.assertj.core.api.Assertions.assertThat; /* Create a BookingAPIReserveTest class to test the bookingApi using web environment with random port. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class ReserveFlightApiTest { String myToken = \u0026#34;Put Your Token Here ahihi :3\u0026#34;; @Value(\u0026#34;${local.server.port}\u0026#34;) private int port; @Autowired private TestRestTemplate restTemplate; /* Negative scenaio: 1, Invalid jwtToken create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber and contactEmail attributes Create the HTTP headers object and pass the jwtToken. Call /reserve end point using post method pass reservationDetails as request body Assert that the response message is \u0026#34;Invalid Token\u0026#34; */ @Test public void testReserveFlightWithInvalidToken() { // Create a ReservationDetails object with the necessary data ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;John\u0026#34;); reservationDetails.setLastName(\u0026#34;Doe\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;Economy\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;1234567890\u0026#34;); reservationDetails.setContactEmail(\u0026#34;john.doe@example.com\u0026#34;); // Create an HTTP entity with the reservation details and an invalid JWT token HttpHeaders headers = new HttpHeaders(); headers.setBearerAuth(\u0026#34;invalid_token\u0026#34;); HttpEntity\u0026lt;ReservationDetails\u0026gt; requestEntity = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); // Send a POST request to the booking API endpoint ResponseEntity\u0026lt;String\u0026gt; responseEntity = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, requestEntity, String.class); // Assert the response status code and message assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED); assertThat(responseEntity.getBody()).isEqualTo(\u0026#34;Invalid Token\u0026#34;); } /* Negative scenaio: Invalid Contact number create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, invalid contactNumber and contactEmail attributes create the HTTP headers object and pass the jwtToken call /reserve end point using post method, pass reservationDetails as request body assert that the response message contains \u0026#34;Contact number must be a 10-digit number\u0026#34; */ @Test public void testInvalidContactNumber() { ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;XXXX\u0026#34;); reservationDetails.setLastName(\u0026#34;XXX\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;First Class\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;1234\u0026#34;); reservationDetails.setContactEmail(\u0026#34;XX@gmail.com\u0026#34;); HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;,myToken); HttpEntity\u0026lt;ReservationDetails\u0026gt; request = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, request, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST); assertThat(response.getBody()).contains(\u0026#34;Contact number must be a 10-digit number\u0026#34;); } /* Positive scenario 1: create the reservationDetails object with fields firstName, lastName, gender, age, flightId, travelClass, ticketPrice, currencyCode,paymentMode, contactNumber and contactEmail attributes create the HTTP headers object and pass the jwtToken call /reserve end point using post method, pass reservationDetails as request body assert that http status OK and assert that the response message contains \u0026#34;reservation made successfully\u0026#34; */ @Test public void testPositiveScenario() { ReservationDetails reservationDetails = new ReservationDetails(); reservationDetails.setFirstName(\u0026#34;XXXX\u0026#34;); reservationDetails.setLastName(\u0026#34;XXX\u0026#34;); reservationDetails.setGender(\u0026#34;Male\u0026#34;); reservationDetails.setAge(30); reservationDetails.setFlightId(1); reservationDetails.setTravelClass(\u0026#34;First Class\u0026#34;); reservationDetails.setTicketPrice(100.0); reservationDetails.setCurrencyCode(\u0026#34;USD\u0026#34;); reservationDetails.setPaymentMode(\u0026#34;Credit Card\u0026#34;); reservationDetails.setContactNumber(\u0026#34;0928895717\u0026#34;); reservationDetails.setContactEmail(\u0026#34;phamhuutuanaws@gmail.com\u0026#34;); HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;,myToken); HttpEntity\u0026lt;ReservationDetails\u0026gt; request = new HttpEntity\u0026lt;\u0026gt;(reservationDetails, headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.postForEntity(\u0026#34;/reserve\u0026#34;, request, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); } } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/11-flight-reservations-controller-classes-module1/",
	"title": "Create the FlightReservation Controller class",
	"tags": [],
	"description": "",
	"content": " You will build the controller class for exposing the \u0026ldquo;getFlightDetails\u0026rdquo; API Amazon Q Developer prompts to build the API Controller: Open the FlightReservation.java under the src/main/java/com.airlines.catalog/controller folder. Add the below imports and starter code for the class. Code\rimport java.util.List;\nimport com.airlines.catalog.dto.FlightDetails;\nimport com.airlines.catalog.exception.AuthenticationException;\nimport com.airlines.catalog.repository.AirportRepository;\nimport com.airlines.catalog.repository.FlightRepository;\nimport com.airlines.catalog.service.FlightDetailsService;\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\npublic class FlightReservation {\n@Autowired\nFlightRepository flightresultsRepository;\n@Autowired\nAirportRepository airportresultsRepository;\n@Autowired\nFlightDetailsService FlightDetailsService;\n@Value(\"${cognito.userpool.id}\")\nprivate String cognitoUserPoolId;\n@Value(\"${aws.region}\")\nprivate String awsRegion;\n@Value(\"${sns.arn}\")\nprivate String snsTopicArn;\n}\r---\rUnder the FlightReservation class, use the following prompt to create the verifyToken method. This method will use the AuthenticationException handler we created earlier. Prompt\rCreate a private method verifyToken to verify JWT token with input parameters asCognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. Get the public key from AwsCognitoKeyProvider. Catch all Exception throw new authenticationException\rIf there are any errors, select the whole method, right click and choose Send to Amazon Q and then Fix Code. This well give you the fixed code in the chat window which you can copy and then replace the function generated earlier. Use the below prompt to create getFlightDetails controller which will expose REST API to find the flights. Prompt\rCreate a rest controller getFlightDetails to get flight details with HTTP GET Method, /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header.\rRest controller returns a ResponseEntity of string.\rInside the getFlightDetails method use the below prompt to implement the API logic Prompt\r/* Call verifyToken method, catch authentication exception and return the responseEntity\rif token is valid and call the findFlights method in FlightDetailsService class\rwith input parameters departure date, departure airport code,\rarrival airport code, flightResultsRepository and airportResultsRepository.\rIf flights are found return the list of flights otherwise return \"No flights found\".\rIf authentication failed the return \"Authentication failed\" and HTTP status of forbidden\r*/\rCurrent complete code for the FlightReservation class (we will continue to update this class in Module 2 ) package com.airlines.catalog.controller; import java.util.List; import com.airlines.catalog.dto.FlightDetails; import com.airlines.catalog.exception.AuthenticationException; import com.airlines.catalog.repository.AirportRepository; import com.airlines.catalog.repository.FlightRepository; import com.airlines.catalog.service.FlightDetailsService; import com.auth0.jwt.JWT; import com.auth0.jwt.JWTVerifier; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.interfaces.DecodedJWT; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class FlightReservation { @Autowired FlightRepository flightresultsRepository; @Autowired AirportRepository airportresultsRepository; @Autowired FlightDetailsService FlightDetailsService; @Value(\u0026#34;${cognito.userpool.id}\u0026#34;) private String cognitoUserPoolId; @Value(\u0026#34;${aws.region}\u0026#34;) private String awsRegion; @Value(\u0026#34;${sns.arn}\u0026#34;) private String snsTopicArn; /* Create a private method verifyToken to verify JWT token with input parameters as Cognito user pool id, AWS region and token string. Function returns a Boolean. Construct the Cognito well known url and then verify the token using RSA Algorithm. catch all Exception throw new authenticationException.*/ private Boolean verifyToken(String cognitoUserPoolId, String awsRegion, String token) throws AuthenticationException { try { String cognitoWellKnownUrl = \u0026#34;https://cognito-idp.\u0026#34; + awsRegion + \u0026#34;.amazonaws.com/\u0026#34; + cognitoUserPoolId + \u0026#34;/.well-known/jwks.json\u0026#34;; Algorithm algorithm = Algorithm.RSA256(new AwsCognitoRSAKeyProvider(cognitoWellKnownUrl)); JWTVerifier verifier = JWT.require(algorithm).build(); DecodedJWT decodedJWT = verifier.verify(token); return true; } catch (Exception e) { throw new AuthenticationException(e); } } /* Create a rest controller getFlightDetails to get flight details with HTTP GET Method , /flight path and request parameters as departure date, departure airport code and arrival airport code JWT Token in the Authorization Header. Rest controller returns a ResponseEntity of string. */ @GetMapping(\u0026#34;/flight\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; getFlightDetails(@RequestParam(\u0026#34;departureDate\u0026#34;) String departureDate, @RequestParam(\u0026#34;departureAirportCode\u0026#34;) String departureAirportCode, @RequestParam(\u0026#34;arrivalAirportCode\u0026#34;) String arrivalAirportCode, @RequestHeader(\u0026#34;Authorization\u0026#34;) String authorization) throws AuthenticationException { /* Call verifyToken method, catch authentication exception and return the responseEntity if token is valid and call the findFlights method in FlightDetailsService class with input parameters departure date, departure airport code, arrival airport code, flightResultsRepository and airportResultsRepository. If flights are found return the list of flights otherwise return \u0026#34;No flights found\u0026#34;. If authentication failed the return \u0026#34;Authentication failed\u0026#34; and HTTP status of forbidden */ try { if (verifyToken(cognitoUserPoolId, awsRegion, authorization)) { List\u0026lt;FlightDetails\u0026gt; flights = FlightDetailsService.findFlights(departureDate, departureAirportCode, arrivalAirportCode, flightresultsRepository, airportresultsRepository); if (flights.size() \u0026gt; 0) { return new ResponseEntity\u0026lt;\u0026gt;(flights.toString(), HttpStatus.OK); } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;No flights found\u0026#34;, HttpStatus.OK); } } else { return new ResponseEntity\u0026lt;\u0026gt;(\u0026#34;Authentication failed\u0026#34;, HttpStatus.FORBIDDEN); } } catch (AuthenticationException e) { return new ResponseEntity\u0026lt;\u0026gt;(e.getResponseEntity().getBody().toString(), HttpStatus.UNAUTHORIZED); } } } "
},
{
	"uri": "//localhost:1313/2-module-1-find-flights-api/12-unit-test-find-flights-api/",
	"title": "Unit Test Find Flights API",
	"tags": [],
	"description": "",
	"content": " Unit Test of getFlightDetailsApiTest method in the Controller Class. The API will be integration tested end to end. Open getFlightDetailsApiTest.java under the test/java/com.airlines.catalog.test/ folder and add the following imports Create bookingApiTest class Prompt\rCreate a bookingApiTest class to test the FlightReservation class /flight endpoint using web environment with random port.\rTest Scenario 1: JWT Token is invalid. Set the Authorization Header as \u0026ldquo;Bearer invalidToken\u0026rdquo;. Prompt\rCreate a method for token invalid test case.\rCreate the HTTP headers object and pass the jwtToken\rurl is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX\rmake a get request\rAssert \"Invalid Token\" is returned in response\rFor all the test scenarios below, use the token that you generated earlier from Cognito during Signup process. If you get token expired error then follow the \u0026ldquo;Sign-in\u0026rdquo; steps in \u0026ldquo;Set up Cognito\u0026rdquo; chapter to get new token. Test scenario 2: JWT Token is valid and the flights are available for the provided test data. Prompt\rCreate a method for token valid test case.\rcreate the HTTP headers object and pass the jwtToken. URL is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request\rAssert \"FlightDetails\" is contained in response\rTest scenario 3: JWT Token is valid and the flights are not available for the provided test data. Prompt\rCreate a method for no flights available.\rcreate the HTTP headers object and pass the jwtToken.\rurl is /flight end point with departureDate=2023-08-01, departureAirportCode=CDG, arrivalAirportCode=LHR,\rmake a get request\rAssert that response contains \"No flights found\"\rTest scenario 4: JWT Token is valid and only one flight is available for the provided test data. Prompt\rCreate a method for single flight available test case.\rCreate the HTTP headers object and pass the jwtToken.\rurl /flight end point with departureDate=2023-08-02, departureAirportCode=LHR, arrivalAirportCode=CDG,\rmake a get request\rAssert \"FlightDetails\" is contained only once in response\rNext, I will get the valid token by logging in via Cognito, then I use that token to replace it in the code, then right click on getFlightDetailsApiTest.java, finally select Run getFlightDetailsApiTest and wait for the result I took the token and ran a test, and it passed all 4 test cases. Complete code for getFlightDetailsApiTest class package com.airlines.catalog.test; import com.airlines.catalog.FlightBookingApplication; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.client.TestRestTemplate; import static org.assertj.core.api.Assertions.assertThat; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; /* Create a bookingApiTest class to test the FlightReservation class /flight endpoint using web environment with random port. */ @SpringBootTest(classes = FlightBookingApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class GetFlightDetailsApiTest { @Autowired private TestRestTemplate restTemplate; @Value(\u0026#34;${server.port}\u0026#34;) private int port; /* Create a method for token invalid test case. Create the HTTP headers object and pass the jwtToken url is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request Assert \u0026#34;Invalid Token\u0026#34; is returned in response */ @Test public void testTokenInvalid() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;Bearer invalidToken\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=MIA\u0026amp;arrivalAirportCode=LAX\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED); assertThat(response.getBody()).contains(\u0026#34;Invalid Token\u0026#34;); } /* Create a method for token valid test case. Create the HTTP headers object and pass the jwtToken. url is /flight end point with query parameters departureDate=2023-08-01, departureAirportCode=MIA, arrivalAirportCode=LAX make a get request Assert \u0026#34;FlightDetails\u0026#34; is contained in response */ @Test public void testTokenValid() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=MIA\u0026amp;arrivalAirportCode=LAX\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;FlightDetails\u0026#34;); } /* Create a method for no flights available. Create the HTTP headers object and pass the jwtToken. url is /flight end point with departureDate=2023-08-01, departureAirportCode=CDG, arrivalAirportCode=LHR, make a get request Assert that response contains \u0026#34;No flights found\u0026#34; */ @Test public void testNoFlightsAvailable() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-01\u0026amp;departureAirportCode=CDG\u0026amp;arrivalAirportCode=LHR\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;No flights found\u0026#34;); } /* Create a method for single flight available test case. Create the HTTP headers object and pass the jwtToken. url /flight end point with departureDate=2023-08-02, departureAirportCode=LHR, arrivalAirportCode=CDG, make a get request Assert \u0026#34;FlightDetails\u0026#34; is contained only once in response */ @Test public void testSingleFlightAvailable() { HttpHeaders headers = new HttpHeaders(); headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;\u0026lt;Get Your Token from Cognito\u0026gt;\u0026#34;); HttpEntity\u0026lt;String\u0026gt; entity = new HttpEntity\u0026lt;\u0026gt;(headers); ResponseEntity\u0026lt;String\u0026gt; response = restTemplate.exchange(\u0026#34;/flight?departureDate=2023-08-02\u0026amp;departureAirportCode=LHR\u0026amp;arrivalAirportCode=CDG\u0026#34;, HttpMethod.GET, entity, String.class); assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); assertThat(response.getBody()).contains(\u0026#34;FlightDetails\u0026#34;); } } "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]